<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch01">
  <?dbhtml stop-chunking?>

  <title>快速起步</title>

  <para>Dart 是开源的、用于创建结构化 HTML5 web 应用的开发语言。本章告诉你为啥 Google 发明
      Dart，Dart 有哪些库的特性，以及如何编写并运行您的第一个 Dart 应用。
  </para>

  <para>
      Dart 不仅仅只是一个新的语言，还包含 各种库、一个编辑器、一个虚拟机（VM）、
      一个能直接运行 Dart 代码的浏览器、和一个能把 Dart 代码编译为 JavaScript 的编译器。
      Dart 的目标是用一种更高效的方式来创建满足用户需求的现代化、高性能应用。
  </para>

  <warning>
    <para>Dart 还在演进中！该书在 2013 年 3 月 开始发布，这个时候里程碑 3 版本刚刚发布，这个时候
        Dart 语言已经稳定，但是一些库还再开发中。如果可能，本书将告诉你那些我们期望实现的功能。</para>
  </warning>

  <sect1 id="ch01-why-dart">
    <title>为什么 Google 要发明 Dart </title>

    <para>Google 非常在意如何让 web 更加帮。 我们白编写了一些 web 应用，
        有些非常成功 - 例如 Gmail、Google 日历、Google+ 等。
        我们希望 web 应用能够快速的加载、平滑的运行、并且具有迷人而又不失风趣的体验。
        我们还希望具有任意背景的开发人员都可以创造很棒的浏览器应用。</para>

    <para>
        Google Chrome 浏览器就是Google 对 web 承诺的一个 示例。
        当 web 平台的发展停滞不前的时候， Google 通过创建 Chrome 浏览器来促进竞争。
        事实证明结果是非常好的。 如 <xref
    linkend="BrowserChart" /> 所示，
    自从 Chrome 浏览器在 2008 年发布以来，浏览器的速度增加了很多。</para>

    <note>
      <para>著名的 <firstterm>V8</firstterm> JavaScript 引擎
          极大的提高了 Chrome 的速度。大多数的 V8 工程师现在都在参与 Dart 项目。</para>
    </note>

    <figure float="0" id="BrowserChart">
      <title>浏览器速度 (V8 benchmark suite v7; 数字越大性能越好)</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/daur_0101.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>
        浏览器的新功能也得到了发展， 例如 
      WebGL、 FileSystem、 Web workers、 和 WebSockets。
      现在浏览器也具有了自动更新能力，可以经常给用户更新新的功能。
    就连移动设备也具有了支持 HTML5 特性的浏览器了。
    </para>

    <para>
        尽管 web 平台有了很多改进，但是用来开发 web 应用的方式还是没有太大的改变。
        我们认为创建 大型的、复杂的 web 应用应该更加容易。
        和其他开发平台比起来，web 用于提高开发效率的工具发展的也很慢。
        在开发现代化的 web 程序之前你还必须熟悉 web 编程。另外，尽管 JavaScript 引擎变得越来越快，但是
         web 应用的启动速度依然很慢。</para>

    <para>我们期待 Dart 能从如下两个方面帮助我们解决这些问题：</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>更好的性能：</emphasis> 
        作为虚拟机工程师，Dart 设计者知道如何创建一个高性能的语言。
        更加结构化的语言更容易优化，一个新的 VM 可以更容易提高性能。</para>
      </listitem>

      <listitem>
        <para><emphasis>更高的成产率：</emphasis> 
        支持库和包可以帮助你和其他开发者协同工作，并且重用其他项目的代码更加容易。
        类型可以让 API 看起来更加清晰和更容易使用。
        工具帮助你重构、定位和调试代码。    
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="ch01-quick-look">
    <title>快速瞥一眼 Dart 语言</title>

    <para>代码胜过千言万语，下面是一个简单的 Dart 程序示例：</para>

    <programlisting format="linespecific" role="keep-together"><remark>lang-dart
</remark>import 'dart:math';

class Point {
  num x, y;
  Point(this.x, this.y);
  num distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return sqrt(dx * dx + dy * dy);
  }
}

main() {
  var p = new Point(2, 3);
  var q = new Point(3, 4);
  print('distance from p to q = ${p.distanceTo(q)}');
}</programlisting>

    <para>当然了，Dart 主要用来编写 web 应用。编写一个 web 应用也是非常容易的：</para>

    <programlisting format="linespecific"><remark>lang-dart
</remark>import 'dart:html';

main() {
  var button = new ButtonElement();
  button..id = 'confirm'
        ..text = 'Click to Confirm'
        ..classes.add('important')
        ..onClick.listen((e) =&gt; window.alert('Confirmed!'));
  querySelector('#registration').children.add(button);
}</programlisting>

    <para>在 <xref
    linkend="ch02" xrefstyle="select: labelnumber" /> 和 <xref linkend="ch03"
    xrefstyle="select: labelnumber" /> 中将分别介绍 Dart  语言特性和主要的库。</para>
  </sect1>

  <sect1 id="ch01-whats-cool">
    <title>Dart 最酷的地方在哪里</title>

    <para>Dart 可能看起来很熟悉，但是不要被她的外表给迷惑了。
        Dart 有很多非常酷的特性来帮助你提高开发效率，另外用 Dart 开发下一代
        超棒 web 应用的过程是非常有趣的。
    </para>

    <para><emphasis>Dart 很容易上手。</emphasis> 
    很多开发者都可以很容易的学习 Dart。
    Dart 是一个面向对象语言，支持 类、单继承、词法范围、顶级方法和非常熟悉的语法。
    大部分的开发者几个小时就可以开始用 Dart 语言了。</para>

    <para><emphasis>Dart 可以编译为 JavaScript。</emphasis> Dart
        在设计的时候就可以编译为 JavaScript，这样 Dart 应用就可以在不支持 Dart VM 的浏览器中运行了。
    语言中的每个特性在添加之前都会考虑是否能够移植到 JavaScript。 Dart 
    划定了一个基准线，并不支持老旧的遗留浏览器。
    </para>

    <para><emphasis>Dart 可以在客户端和服务器运行。</emphasis> 
    Dart 虚拟机 (VM) 可以在浏览器中运行，也可以作为
    独立的命令行应用运行。内置的库支持 文件、目录、socket、和 web 服务器等功能。
    你完全可以用 Dart 来开发一个独立的应用。
    </para>

    <para><emphasis>Dart 带有一个轻量级的编辑器。</emphasis> 
    可以用 Dart 编辑器编写、启动、调试 Dart 应用。
    编辑器具有 代码完成、提示潜在的 bug、调试命令行和 web 应用、还支持重构。
    编写 Dart 应用并不一定使用 Dart 编辑器，编辑器只是一个提高你开发效率的工具。    
    </para>

    <para><emphasis>Dart 支持类型，但是也可以不用类型。</emphasis>
        如果你想快速实现某个功能、尚未确定具体的代码结构、或者表达一些强类型语言没法
        实现的东西，则可以忽略类型。你可以随着项目的逐渐成熟来添加类型，添加类型后的代码结构看起来
        更加清晰，方便更多的开发者一起参与。Dart 可选的类型是静态类型注解，被当做文档来表达你的意图。
        使用类型可以减少需要的代码注释，而且工具可以提供更好的警告和错误信息。
    </para>

    <para><emphasis>Dart 适合从小到大、从简单到复杂的应用。</emphasis>
        Web 开发通常都是一个迭代的开发过程。可以使用重新加载按钮当做编译器，
        修改一点代码，重新载入网页，查看你的修改。 随着更多想法的冒出，你可以添加更多的代码和结构。
        Dart 的 顶级函数、可选类型、类和库的功能可以让你从一个小程序开始，逐步增长为一个复杂
        的应用。
        Dart 编辑器可以帮助你重构你的代码。</para>

    <para><emphasis>Dart 有很多内置的库。</emphasis>
        核心的内置库支持基础类型和其他基础的功能，例如 集合、日期、正则表达式等。
        web 应用可以使用 HTML 库来操作 DOM。
        命令行应用可以使用 I/O 库来操作文件、目录、socket 和 服务器等。
        其他库还包含  URI、 UTF、 Crypto、 Math、 Unit
    test 等。</para>

    <para><emphasis>Dart 的 isolate 特性支持安全、简单的并发编程。</emphasis> 
    传统的多线程共享内存并发编程非常难于调试并且很容易导致死锁。
    Dart 的 isolate 受到 Erlang 的启发，提供了一个易于理解的运行模型。
    生成新的 isolate 既快又廉价，并且无共享状态。在 web 应用中，isolate 可以被
    编译到 Web worker。
    </para>

    <para><emphasis>Dart 支持代码共享。</emphasis>
    传统的 web 开发流程无法随意的引用其他地方的第三方框架。
    通过使用 Dart 的包管理器（pub）    和语言的库特性等，可以很容易的
    查找可用的库、安装需要的库、和使用这些库。
    </para>

    <para><emphasis>Dart 是开源的。</emphasis>
    Dart 诞生于 web，并使用 BSD 风格许可。可以在 查看项目的
    <ulink url="http://dart.googlecode.com">问题和代码库</ulink> 。
    也许你即将提交下一个补丁？</para>
  </sect1>

  <sect1 id="ch01-editor">
    <title>开始使用 Dart</title>

    <para>你已经了解了 Dart 的一些理念，是时候来看看 Dart 代码了！
        这里使用开源的 Dart 编辑器。 在下载 Dart 的时候，你得到的不仅仅是一个编辑器，
        还包含一些工具，例如 
    把 Dart 编译为 JavaScript 的 Dart-to-JavaScript 编译器和一个包含 Dart VM 的
    Chromium （昵称为 <emphasis>Dartium</emphasis>）浏览器。
    </para>

    <note>
      <para>如果你在安装和使用 Dart 编辑器的时候遇到的问题，请参考 
      <ulink
      url="http://www.dartlang.cc/tools/editor/troubleshoot.html">Dart 问题指南。</ulink></para>
    </note>

    <sect2 id="ch01-editor-download">
      <title>第一步：下载并安装 Dart</title>

      <para>
          在这一步将安装 Dart 编辑器，需要有 Java 运行环境。
          （如果你不想修改 PATH 环境变量，则可以把 JRE 安装到你的 Dart 目录下名字为
         <code>jre</code> 的子目录中。 ）
      </para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para><ulink url="http://www.dartlang.cc/#get-started">下载
          Dart</ulink>.</para>
        </listitem>

        <listitem>
          <para>解压下载的文件。我们后面把解压的目录称之为 <emphasis>Dart 安装目录</emphasis>，
              该目录包含  <code>DartEditor</code> 可执行文件和其他几个子目录，例如 
              <code>samples</code> 子目录包含一些示例代码。</para>
        </listitem>

        <listitem>
          <para>如果你还没有安装 Java 运行环境，则下载并安装一个， Dart 编辑器需要 Java 6 或者更高版本。
              </para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="ch01-editor-launch">
      <title>第二步：启动 Dart 编辑器</title>

      <para>打开 Dart 安装目录，运行里面的 
      <emphasis role="bold">DartEditor</emphasis> 可执行 <phrase
      role="keep-together">文件 <inlinemediaobject>
          <imageobject>
            <imagedata fileref="figs/web/Dart_Logo_21.png" format="PNG"
                       width="0.12in" />
          </imageobject>
        </inlinemediaobject>。</phrase></para>

      <para>启动后的 Dart 编辑器看起来界面如 <xref linkend="DartEditor-initial" />。</para>

      <figure float="0" id="DartEditor-initial">
        <title>Dart 编辑器和欢迎界面</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/daur_0102.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 id="ch01-editor-code">
      <title>第三步：创建并运行一个应用</title>

      <para>从头创建一个 web 应用或者命令行应用是很容易的。
          下面是创建一个命令行应用的步骤：
      </para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para>点击  New Application（新应用） 按钮 <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/newapp.png" width="0.12in" />
              </imageobject>
            </inlinemediaobject> (在 Dart 编辑器的左上角)。
          也可以通过菜单  <emphasis role="bold">File &gt; New
          Application...</emphasis> 或者点击换页界面的
          <emphasis role="bold">Create an Application…</emphasis> 按钮。
          然后出现一个 对话框： <xref
          linkend="DartEditor-newapp" /> </para>
        </listitem>

        <listitem>
          <para>输入创建的新应用的名字，例如 
          <code>hello_world</code>。另外你也可以修改
          该应用所在的目录。</para>
        </listitem>

        <listitem>
          <para>选中 <emphasis role="bold">Generate sample
          content</emphasis>（生成示例代码） 和 <emphasis role="bold">Command-line
          application</emphasis>（命令行应用）两个选项。然后点击
  <emphasis
          role="bold">Finish</emphasis> 来创建该应用。
          </para>

          <figure float="0" id="DartEditor-newapp">
            <title>使用 Dart 编辑器创建命令行或者 web 应用。</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0103.png" format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>
              在编辑视图中显示默认的 Dart 代码文件，代码目录出现在左边的 文件视图中。 
              现在的 Dart 编辑器应该看起来和  <xref linkend="DartEditor-helloworld" /> 类似。</para>

          <figure float="0" id="DartEditor-helloworld">
            <title>Dart 编辑器显示新应用的截图</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0104.png" format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>点击 Run （运行）按钮 <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/run.png" width="0.12in" />
              </imageobject>
            </inlinemediaobject> 来运行。</para>

          <para>对于命令行应用，
          <literal>print()</literal> 语句打印结果出现在底部右侧 Problems tab 旁边的一个 tab 中。
          </para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="ch01-editor-sample">
      <title>第四步：打开并运行一个示例项目</title>

      <para>Dart 编辑器包含几个示例应用。这里演示如何在
          Dartium 中运行一个 web 应用。</para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para>点击 <emphasis role="bold">Welcome</emphasis> tab。
              或者 选择 <emphasis role="bold">Tools</emphasis> 菜单中的
            <emphasis role="bold">Welcome Page</emphasis> 。</para>
        </listitem>

        <listitem>
          <para>在  Welcome tab 中，点击带有 
               <emphasis
          role="bold">Sunflower</emphasis> 文字的图片。编辑器将复制
          <ulink
          url="http://code.google.com/p/dart/source/browse/trunk/dart/samples/sunflower/">Sunflower
          应用目录</ulink>中的文件，并且在 编辑视图中显示
          <emphasis>web/sunflower.html</emphasis> 文件。</para>
        </listitem>

        <listitem>
          <para>点击 Run 按钮 <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/run.png" width="0.12in" />
              </imageobject>
            </inlinemediaobject>。Dart 编辑器启动  Dartium 来显示 
          <phrase
          role="keep-together"><emphasis>sunflower.html</emphasis></phrase> 文件。</para>

          <warning>
            <para>Dartium 还处于技术预览阶段，可能包含安全和稳定性问题。
            <emphasis>不要把 Dartium 作为你的日常浏览器使用！！</emphasis></para>
          </warning>
        </listitem>

        <listitem>
          <para>移动网页上的滑动条来改变向日葵，如  <xref
          linkend="sunflower" /> 所示。</para>

          <figure float="none" id="sunflower">
            <title>运行在 Dartium 中的向日葵应用</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0105.png" format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="ch01-editor-next">
      <title>下一步干啥？</title>

      <para>现在你已经入门了，你可以了解 Dart 编辑器 的更多内容并帮助
      <phrase role="keep-together">改进 Dart 编辑器</phrase>。</para>

      <sect3 id="ch01-editor-tutorial">
        <title>学习一个教程</title>

        <para>看看 <ulink
        url="http://www.dartlang.cc/docs/tutorials/">Dart 游戏</ulink>
        web 应用教程，该教程使用 Dart 编辑器来开发一个网页游戏。</para>
      </sect3>

      <sect3 id="ch01-editor-learn-more">
        <title>成为高级用户</title>

        <para>访问 <ulink url="http://www.dartlang.cc/editor/">Dart
        编辑器主页</ulink> 来了解 编辑器的其他功能。</para>
      </sect3>

      <sect3 id="ch01-editor-feedback">
        <title>发送反馈</title>

        <para>点击右上角的  <emphasis role="bold">SEND FEEDBACK</emphasis> 连接来发送
            反馈，你遇到的任何问题和任何建议都可以反馈给我们。</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch03">
  <?dbhtml stop-chunking?>

  <title>Dart 库概览</title>

  <para>本章介绍如何使用 Dart 库中的主要功能。
  这里只是一个概要介绍，并不全面。当你想查看一个类的
  详细信息的时候，请参考 <ulink
  url="http://api.dartlang.org/">Dart API 文档。</ulink></para>

  <sect1 id="ch03-dartcore---strings-collections-and-more">
    <title>dart:core - 数字、集合、 String、以及更多</title>

    <para>Dart 核心库提供了少量关键的功能。
    该库自动导入到每个 Dart 程序中。</para>

    <sect2 id="ch03-numbers">
      <title>Numbers</title>

      <para>dart:core 库定义了 num、 int、 和 double 类，
      这些类提供了一些基本的数字操作功能。</para>

      <para>通过 int 或者 double 的
      <literal>parse()</literal> 函数可以把字符串转化为 int 或者 double：
       </para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/number-tests.dart
</remark>assert(int.parse('42') == 42);
assert(int.parse('0x42') == 66);
assert(double.parse('0.50') == 0.5);</screen>

      <para>要指定是几进制数，用可选的 <literal>radix</literal>
      参数：</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/number-tests.dart
</remark>assert(int.parse('42', radix: 16) == 66);</screen>

      <para>用 <literal>toString()</literal> 函数 (<ulink
      url="http://api.dartlang.org/dart_core/Object.html">Object</ulink> 类定义
      的函数) 可以把 int 或者 double 转化为 string。
      通过 <literal>toStringAsFixed()</literal>
      (num 类定义的函数) 可以指定保留几位小数。
      通过 <phrase
      role="keep-together"><literal>toStringAsPrecision()</literal>
      </phrase>(也是 num 类定义) 可以指定几位有效数字：</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/number-tests.dart
</remark>// Convert an int to a string.
assert(42.toString() == '42');

// Convert a double to a string.
assert(123.456.toString() == '123.456');

// Specify the number of digits after the decimal.
assert(123.456.toStringAsFixed(2) == '123.46');

// Specify the number of significant figures.
assert(123.456.toStringAsPrecision(2) == '1.2e+2');
assert(double.parse('1.2e+2') == 120.0);</screen>

      <para>详细信息参考 <ulink
      url="http://api.dartlang.org/dart_core/int.html">int,</ulink> <ulink
      url="http://api.dartlang.org/dart_core/double.html">double,</ulink> 和
      <ulink url="http://api.dartlang.org/dart_core/num.html">num 的 API 文档。</ulink>
      也可以参考下 <xref lang="" linkend="ch03-dart-math" />。</para>
    </sect2>

    <sect2 id="ch03-strings-and-regular-expressions">
      <title>字符串（String）和正则表达式</title>

      <para>Dart 中的字符串是一个不可变的 UTF-16 编码单元（code units） 序列。
          在语言概览中详细介绍了 <link
      linkend="strings">strings</link>。还可以用正则表达式
      (RegExp 对象) 来在字符串内搜索和替换部分
      字符串
      。</para>

      <para>String 类有一些函数：
      <literal>split()</literal>、 <literal>contains()</literal>、
      <literal>startsWith()</literal>、 <phrase
      role="keep-together"><literal>endsWith()</literal></phrase>、 等等。</para>

      <sect3 id="ch03-searching-inside-a-string">
        <title>在字符串内搜索</title>

        <para>你可以查找字符串内匹配字符的开始位置，也可以
            检查字符串是否以某个特定的模式开始和结束。
            例如：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>// 检测一个字符串是否包含另外一个字符串
assert('Never odd or even'.contains('odd'));

// 一个字符串是否以另外一个字符串开始？
assert('Never odd or even'.startsWith('Never'));

// 一个字符串是否以另外一个字符串结束？
assert('Never odd or even'.endsWith('even'));

// 查找一个字符串在另外一个字符串中出现的位置。
assert('Never odd or even'.indexOf('odd') == 6);</screen>
      </sect3>

      <sect3 id="ch03-extracting-data-from-a-string">
        <title>从字符串中提取数据</title>

        <para>可以从字符串中获取每个独立的字符或者 UTF-16 编码单元。
            </para>

        <para>还可以从字符串中截取一个子字符串或者把一个
            字符串分割为一个字符串数组：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>// 截取一个子字符串
assert('Never odd or even'.substring(6, 9) == 'odd');

// 使用一个模式来分割字符串
var parts = 'structured web apps'.split(' ');
assert(parts.length == 3);
assert(parts[0] == 'structured');

// 通过下标索引获取一个字符（String 对象）
assert('Never odd or even'[0] == 'N');

// 使用 空字符串作为参数调用 split() 函数可以获取字符串中的
// 所有单个字符，结果为一个内容为 String 的 list
for (var char in 'hello'.split('')) {
  print(char);
}

// 获取一个字符串所有字符的 UTF-16 编码单元
// 有些字符可能需要用两个编码单元来表达
var codeUnitList = 'Never odd or even'.codeUnits.toList();
assert(codeUnitList[0] == 78);</screen>
      </sect3>

      <sect3 id="ch03-converting-to-uppercase-or-lowercase">
        <title>大小写转换</title>

        <para>字符串大小写转换非常简单：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>// 转换为大小
assert('structured web apps'.toUpperCase() == 'STRUCTURED WEB APPS');

// 转换为小写
assert('STRUCTURED WEB APPS'.toLowerCase() == 'structured web apps');</screen>

        <note>
          <para>注意：上面的函数并不适用于所有的语言。
              例如  ，土耳其语言中的   <emphasis>I</emphasis> 用上面的函数转换会得到错误的结果。</para>
        </note>
      </sect3>

      <sect3 id="ch03-trimming-and-empty-strings">
        <title>删除字符串首尾空白字符和检测空字符串</title>

        <para>用
        <literal>trim()</literal> 函数删除字符串首尾的空白字符。
        用 <literal>isEmpty</literal> 来检测字符串是否为空（长度为 0 ）。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>// 删除字符串首尾空白字符
assert('  hello  '.trim() == 'hello');

// 检测字符串是否为空
assert(''.isEmpty);

// 只有空白字符的字符串并不为空
assert(!'  '.isEmpty);</screen>
      </sect3>

      <sect3 id="_replacing_part_of_a_string">
        <title>替代部分字符</title>

        <para>String 是不可变对象，所以你只能创建 String 对象而无法修改他们。
            如果你仔细的查看  <ulink
        url="http://api.dartlang.org/dart_core/String.html">String API
        文档</ulink>，你会发现所有的函数都没有修改 String 的状态。例如，
        函数
        <literal>replaceAll()</literal> 返回一个
        新的 String 对象而不是修改原来的对象：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>var greetingTemplate = 'Hello, NAME!';
var greeting = greetingTemplate.replaceAll(new RegExp('NAME'), 'Bob');

assert(greeting != greetingTemplate); // greetingTemplate didn't change.</screen>
      </sect3>

      <sect3 id="_building_a_string">
        <title>创建一个 string</title>

        <para>要在代码中生成一个 string， 你可以用 StringBuffer。
        只有调用 
        <literal>toString()</literal> 函数的时候 StringBuffer 才生成
        String 。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>var sb = new StringBuffer();

sb..write('Use a StringBuffer ')
  ..writeAll(['for ', 'efficient ', 'string ', 'creation'])
  ..write('.');

var fullString = sb.toString();

assert(fullString ==
    'Use a StringBuffer for efficient string creation.');</screen>
      </sect3>

      <sect3 id="ch03-regular-expressions">
        <title>正则表达式</title>

        <para>RegExp 类提供了 JavaScript 正则表达式的功能。
            用正则表达式搜索字符串和匹配符合某个规则的字符串更加高效。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>// 匹配一个或者多个数字的规则
var numbers = new RegExp(r'\d+');

var allCharacters = 'llamas live fifteen to twenty years';
var someDigits = 'llamas live 15 to 20 years';

// contains() 可以用正则表达式作为参数
assert(!allCharacters.contains(numbers));
assert(someDigits.contains(numbers));

// 用一个字符串替换所有匹配的字符
var exedOut = someDigits.replaceAll(numbers, 'XX');
assert(exedOut == 'llamas live XX to XX years');</screen>

        <para>你也可以直接操作 RegExp 对象。
            Match 类提供了访问匹配一个表达式的结果：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/string-tests.dart
</remark>var numbers = new RegExp(r'\d+');
var someDigits = 'llamas live 15 to 20 years';

// 检测字符串中是否有匹配的项
assert(numbers.hasMatch(someDigits));

// 遍历所有匹配的项
for (var match in numbers.allMatches(someDigits)) {
  print(match.group(0)); // 15, then 20
}</screen>
      </sect3>

      <sect3 id="ch03-more-information-8">
        <title>更多信息</title>

        <para>参考  <ulink
        url="http://api.dartlang.org/dart_core/String.html">String API
        文档</ulink> 来查看 String 的所有函数。同时参考
        <ulink
        url="http://api.dartlang.org/dart_core/StringBuffer.html">StringBuffer,</ulink>
        <ulink
        url="http://api.dartlang.org/dart_core/Pattern.html">Pattern,</ulink>
        <ulink
        url="http://api.dartlang.org/dart_core/RegExp.html">RegExp,</ulink>
        and <ulink
        url="http://api.dartlang.org/dart_core/Match.html">Match</ulink> 类的 API 文档来了解这些类的更多功能。</para>
      </sect3>
    </sect2>

    <sect2 id="ch03-collections">
      <title>集合</title>

      <para>Dart 包含了一个核心的集合 API，这些 API 包含
      lists、 sets、和  maps。</para>

      <sect3 id="ch03-lists">
        <title>Lists</title>

        <para>在语言概览中已经介绍过用 字符字面量来创建 <link linkend="lists">lists</link> 的方法。
            另外也可以用 List 的构造函数。 List 还定义了一些函数可以添加或者删除 List 中的内容。
        </para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/list-tests.dart
</remark>// 使用 List 构造函数
var vegetables = new List();

// 使用 list 字符字面量 创建 List
var fruits = ['apples', 'oranges'];

// 添加到 list 中
fruits.add('kiwis');

// 一次添加多个项到 list 中
fruits.addAll(['grapes', 'bananas']);

// 查询 list 的长度
assert(fruits.length == 5);

// 删除一个项
var appleIndex = fruits.indexOf('apples');
fruits.removeAt(appleIndex);
assert(fruits.length == 4);

// 删除 list 中的所有项
fruits.clear();
assert(fruits.length == 0);</screen>

        <para>用 <literal>indexOf()</literal> 函数来查找 list 中
            某个位置的对象：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/list-tests.dart
</remark>var fruits = ['apples', 'oranges'];

// 通过索引访问 list 中的对象
assert(fruits[0] == 'apples');

// 查找 list 中是否包含该对象
assert(fruits.indexOf('apples') == 0);</screen>

        <para>用 <literal>sort()</literal> 函数可以排序 list 中的内容。
            该函数的参数为一个用来比较两个对象的方法。该方法的返回值需要满足如下要求：
            比较的结果为 <emphasis>小于</emphasis>的话，则返回值必需  &lt; 0，
            如果<emphasis>相等</emphasis>的话，则必需返回 0，如果结果为
            <emphasis>大于</emphasis>的话，则返回值必需为  &gt; 0 。
           下面的示例使用了  <ulink
        url="http://api.dartlang.org/dart_core/Comparable.html">Comparable</ulink>
        接口定义的函数 <literal>compareTo()</literal>， String 类实现了该函数。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/list-tests.dart
</remark>var fruits = ['bananas', 'apples', 'oranges'];

// 排序 list 中的对象
fruits.sort((a, b) =&gt; a.compareTo(b));
assert(fruits[0] == 'apples');</screen>

        <para>List 支持泛型，所以你可以设置一个 List 中对象的类型：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/list-tests.dart
</remark>// 这个 list 应该只包含 String 对象
var fruits = new List&lt;String&gt;();

fruits.add('apples');
var fruit = fruits[0];
assert(fruit is String);

// 将有一个静态分析警告， num 不是一个 String
fruits.add(5);  // BAD: 在检测模式（Checked mode）下会抛出异常。</screen>

        <para>参考 <ulink
        url="http://api.dartlang.org/dart_core/List.html">List API
        文档</ulink> 来了解 List 对象的所有函数，</para>
      </sect3>

      <sect3 id="ch03-sets">
        <title>Sets</title>

        <para>Dart 中的 Set 是包含唯一对象的无序集合。
            由于 set 中的对象都是没有顺序的，所以无法用位置索引来
            访问里面的对象。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/set-tests.dart
</remark>var ingredients = new Set();
ingredients.addAll(['gold', 'titanium', 'xenon']);
assert(ingredients.length == 3);

// 添加一个重复的对象不起作用
ingredients.add('gold');
assert(ingredients.length == 3);

// 从 set 中删除一个对象
ingredients.remove('gold');
assert(ingredients.length == 2);</screen>

        <para>用 <literal>contains()</literal> 和
        <literal>containsAll()</literal> 来检测 set 中是否包含一个或者多个对象：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/set-tests.dart
</remark>var ingredients = new Set();
ingredients.addAll(['gold', 'titanium', 'xenon']);

// 检测一个对象是否在 set 中
assert(ingredients.contains('titanium'));

// 检测是否 set 包含多个对象
assert(ingredients.containsAll(['titanium', 'xenon']));</screen>

        <para>交集是两个 set 中都包含的对象集合。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/set-tests.dart
</remark>var ingredients = new Set();
ingredients.addAll(['gold', 'titanium', 'xenon']);

// 创建两个 set 的交集
var nobleGases = new Set.from(['xenon', 'argon']);
var intersection = ingredients.intersection(nobleGases);
assert(intersection.length == 1);
assert(intersection.contains('xenon'));</screen>

        <para>参考 <ulink
        url="http://api.dartlang.org/dart_core/Set.html">Set API 文档</ulink>
        了解 set 的更多功能。</para>
      </sect3>

      <sect3 id="ch03-maps-aka-dictionaries-or-hashes">
        <title>Maps</title>

        <para>map 通常被称之为 <emphasis>dictionary</emphasis> 或者
        <emphasis>hash</emphasis>， map 是一个无序的 key-value（键-值） 对。
        map 中每个值都有一个对应的键便于访问。和 JavaScript 不同， Dart 对象不是 map。
        </para>

        <para><phrase role="keep-together">
            可以通过字符字面量定义 map 也可以通过 map 构造函数来定义 map：
        </phrase></para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>// map 通常都是用 String 做为 key
var hawaiianBeaches = {
  'oahu'       : ['waikiki', 'kailua', 'waimanalo'],
  'big island' : ['wailea bay', 'pololu beach'],
  'kauai'      : ['hanalei', 'poipu']
};

// 用构造函数创建 map
var searchTerms = new Map();

// map 支持泛型，所以可以指定 map 的 key 和 value 的类型：
var nobleGases = new Map&lt;int, String&gt;();</screen>

        <para>使用方括号来添加、设置和访问 map 中的值。用
        <literal>remove()</literal> 函数从 map 中删除
        对应的 key 和 value。<remark> [注意 下面的示例中使用了 尚未见到过的 containsKey 函数]</remark></para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>var nobleGases = { 54: 'xenon' };

// 通过 key 获取对应的 value
assert(nobleGases[54] == 'xenon');

// 检测 map 中是否包含一个 key
assert(nobleGases.containsKey(54));

// 删除一个 key 和对应的 value
nobleGases.remove(54);
assert(!nobleGases.containsKey(54));</screen>

        <para>可以获取 map 的所有 key 或者所有 value：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>var hawaiianBeaches = {
  'oahu' : ['waikiki', 'kailua', 'waimanalo'],
  'big island' : ['wailea bay', 'pololu beach'],
  'kauai' : ['hanalei', 'poipu']
};

// 获取所有的 key，结果为一个无序集合 ( 一个 Iterable).
var keys = hawaiianBeaches.keys;

assert(keys.length == 3);
assert(new Set.from(keys).contains('oahu'));

// 获取 map 所有 value 的集合 (an Iterable of Iterables).
var values = hawaiianBeaches.values;
assert(values.length == 3);
assert(values.any((v) =&gt; v.indexOf('waikiki') != -1));</screen>

        <para>用
        <literal>containsKey()</literal> 函数检测
        map 中是否包含一个 key。由于 map 的 value 可以为 null，
        所以你不能通过判断 key 来判断是否包含一个 value。
        </para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>var hawaiianBeaches = {
  'oahu' : ['waikiki', 'kailua', 'waimanalo'],
  'big island' : ['wailea bay', 'pololu beach'],
  'kauai' : ['hanalei', 'poipu']
};

assert(hawaiianBeaches.containsKey('oahu'));
assert(!hawaiianBeaches.containsKey('florida'));</screen>

        <para>如果你想在 key 不存在的时候
            才设置该值，则可以用  <literal>putIfAbsent()</literal> 函数。该函数
            的参数为返回设置的值的方法：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>var teamAssignments = {};
teamAssignments.putIfAbsent('Catcher', () =&gt; pickToughestKid());
assert(teamAssignments['Catcher'] != null);</screen>

        <para>参考 <ulink
        url="http://api.dartlang.org/dart_core/Map.html">Map API 文档</ulink>
        查看 Map 的所有函数。</para>
      </sect3>

      <sect3 id="ch03-common-collection-methods">
        <title>常用的集合方法</title>

        <para>List、 Set、 和 Map 公用一些常用的
            集合操作。有些函数定义在 Iterable 类中， List 和 Set 实现了该类。</para>

        <note>
          <para>虽然  Map 没有实现 Iterable，但是通过 Map 的
              <literal>keys</literal> 和
          <literal>values</literal> 属性可以得到一个 Iterable 对象。 </para>
        </note>

        <para>用 <literal>isEmpty</literal> 函数来检查
            集合是否为空：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/collection-isEmpty.dart
</remark>var teas = ['green', 'black', 'chamomile', 'earl grey'];
assert(!teas.isEmpty);</screen>

        <para>要在 list、 set、 或者 map 中的每个元素上使用一个方法，则可以用
         <literal>forEach()</literal> 函数：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/collection-apply-function.dart
</remark>var teas = ['green', 'black', 'chamomile', 'earl grey'];

teas.forEach((tea) =&gt; print('I drink $tea'));</screen>

        <para>当调用 Map 的 <literal>forEach()</literal> 函数的时候，
            方法参数必须有两个参数（分别为 key 和 value）：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-1.dart
</remark>// 注意：遍历集合是无序的
hawaiianBeaches.forEach((k,v) {
  print('I want to visit $k and swim at $v');
  // I want to visit oahu and swim at [waikiki, kailua, waimanalo], etc.
});</screen>

        <para>还有一个用来遍历集合的方法：<literal>map()</literal>
        ，该函数把所有的结果放到一个对象中：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/collection-apply-function.dart
</remark>var teas = ['green', 'black', 'chamomile', 'earl grey'];

var loudTeas = teas.map((tea) =&gt; tea.toUpperCase());
loudTeas.forEach(print);</screen>

        <note>
          <para>注意： <literal>map()</literal> 函数返回的 Iterable 对象是
           <emphasis>lazily evaluated（懒惰加载的）</emphasis>：
           只有当你使用返回对象的时候，你的方法才被调用。</para>
        </note>

        <para>要强制立刻在每个对象上调用你的方法，则可以用 <literal>map().toList()</literal> 
或者
        <literal>map().toSet()</literal> 函数：</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/collection-apply-function.dart
</remark>var loudTeaList = teas.map((tea) =&gt; tea.toUpperCase()).toList();</screen>

        <para>Iterable 的 <literal>where()</literal> 函数用户过滤集合中的对象，
            返回符合条件的所有对象。
            Iterable 的 <literal>any()</literal>
        和 <literal>every()</literal> 函数用来检查是否一些对象或者所有对象都满足
        一个条件。</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/collection-any-every.dart
</remark>var teas = ['green', 'black', 'chamomile', 'earl grey'];

// Chamomile is not caffeinated.
bool isDecaffeinated(String teaName) =&gt; teaName == 'chamomile';

// Use where() to find only the items that return true
// from the provided function.
var decaffeinatedTeas = teas.where((tea) =&gt; isDecaffeinated(tea));
// or teas.where(isDecaffeinated)

// Use any() to check whether at least one item in the collection
// satisfies a condition.
assert(teas.any(isDecaffeinated));

// Use every() to check whether all the items in a collection
// satisfy a condition.
assert(!teas.every(isDecaffeinated));</screen>

        <para>参考 <ulink
        url="http://api.dartlang.org/dart_core/Iterable.html">Iterable API
        文档</ulink> 和 List、 Set、 以及 Map 的文档来了解集合的所有函数。</para>
      </sect3>
    </sect2>

    <sect2 id="ch03-uri">
      <title>URIs</title>

      <para><ulink url="http://api.dartlang.org/dart_core/Uri.html">Uri
      类</ulink> 提供了用来编码和解码 URI 字符串的函数。
      这些函数处理 URI 中的特殊字符，例如 <literal
      moreinfo="none">&amp;</literal> 和 <literal
      moreinfo="none">=</literal>。 Uri 类还提供了获取 URI 组件的函数，
      例如 URI 的 主机地址、端口号、协议 等等。
      </para>

      <sect3 id="ch03-uri-fully-qualified">
        <title>编码和解码完整的 URI</title>

        <para>使用 <literal>encodeFull()</literal>
        和 <literal>decodeFull()</literal> 函数来编码和解码
        <emphasis>除了</emphasis> 特殊字符的 URI（例如这些特殊字符：<literal
        moreinfo="none">/</literal>, <literal moreinfo="none">:</literal>,
        <literal moreinfo="none">&amp;</literal>, <literal
        moreinfo="none">#</literal>）。
        这些函数<phrase
        role="keep-together">特别擅长</phrase> 
        用来编码和解码一个完整的 URI，保留 <phrase
        role="keep-together">特殊的 URI 字符。</phrase></para>

        <screen format="linespecific"><remark>lang-dart
code/ch03/encodeUri.dart
</remark>main() {
  var uri = 'http://example.org/api?foo=some message';
  var encoded = Uri.encodeFull(uri);
  assert(encoded == 'http://example.org/api?foo=some%20message');

  var decoded = Uri.decodeFull(encoded);
  assert(uri == decoded);
}</screen>

        <para>注意，上面的代码中，只有位于 <literal
        moreinfo="none">some</literal> 和 <literal
        moreinfo="none">message</literal> 之间的空格给编码了。</para>
      </sect3>

      <sect3 id="ch03-uri-components">
        <title>编码和解码 URI 组件</title>

        <para>To encode and decode all of a string’s characters that have
        special meaning in a URI, including (but not limited to) <literal
        moreinfo="none">/</literal>, <literal moreinfo="none">&amp;</literal>,
        and <literal moreinfo="none">:</literal>, use the
        <literal>encodeComponent()</literal> and
        <literal>decodeComponent()</literal> methods.</para>

        <screen format="linespecific"><remark>lang-dart
code/ch03/encodeUriComponents.dart
</remark>main() {
  var uri = 'http://example.org/api?foo=some message';
  var encoded = Uri.encodeComponent(uri);
  assert(encoded == 'http%3A%2F%2Fexample.org%2Fapi%3Ffoo%3Dsome%20message');

  var decoded = Uri.decodeComponent(encoded);
  assert(uri == decoded);
}</screen>

        <para>Notice how every special character is encoded. For example,
        <literal moreinfo="none">/</literal> is encoded to <literal
        moreinfo="none">%2F</literal>.</para>
      </sect3>

      <sect3 id="ch03-uri-parsing">
        <title>Parsing URIs</title>

        <para>If you have a Uri object or a URI string, you can get its parts
        using Uri fields such as <literal>path</literal>. To create a Uri from
        a string, use the <literal>parse()</literal> static method:</para>

        <screen format="linespecific"><remark>lang-dart
code/ch03/parseUri.dart
</remark>main() {
  var uri = Uri.parse('http://example.org:8080/foo/bar#frag');

  assert(uri.scheme   == 'http');
  assert(uri.host     == 'example.org');
  assert(uri.path     == '/foo/bar');
  assert(uri.fragment == 'frag');
  assert(uri.origin   == 'http://example.org:8080');
}</screen>

        <para>See the <ulink
        url="http://api.dartlang.org/dart_core/Uri.html">Uri API docs</ulink>
        for more URI components that you can get.</para>
      </sect3>

      <sect3 id="ch03-uri-building">
        <title>Building URIs</title>

        <para>You can build up a URI from individual parts using the
        <literal>Uri()</literal> <phrase role="keep-together"
        security="">constructor</phrase>:</para>

        <programlisting role="keep-together"><remark>lang-dart
code/ch03/uriFromComponents.dart
</remark>main() {
  var uri = new Uri(scheme: 'http', host: 'example.org', 
                    path: '/foo/bar', fragment: 'frag');
  assert(uri.toString() == 'http://example.org/foo/bar#frag');
}</programlisting>
      </sect3>
    </sect2>

    <sect2 id="ch03-dates-and-times">
      <title>Dates and Times</title>

      <para>A DateTime object is a point in time. The time zone is either UTC
      or the local time zone.</para>

      <para>You can create DateTime objects using several constructors:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/date.dart
</remark>// Get the current date and time.
var now = new DateTime.now();

// Create a new DateTime with the local time zone.
var y2k = new DateTime(2000);   // January 1, 2000

// Specify the month and day.
y2k = new DateTime(2000, 1, 2); // January 2, 2000

// Specify the date as a UTC time.
y2k = new DateTime.utc(2000);   // January 1, 2000, UTC

// Specify a date and time in milliseconds since the Unix epoch.
y2k = new DateTime.fromMillisecondsSinceEpoch(946684800000, isUtc: true);

// Parse an ISO 8601 date.
y2k = DateTime.parse('2000-01-01T00:00:00Z');</screen>

      <para>The <literal moreinfo="none">millisecondsSinceEpoch</literal>
      property of a date returns the number of milliseconds since the “Unix
      epoch”—January 1, 1970, UTC:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/date.dart
</remark>var y2k = new DateTime.utc(2000);           // 1/1/2000, UTC
assert(y2k.millisecondsSinceEpoch == 946684800000);
var unixEpoch = new DateTime.utc(1970); // 1/1/1970, UTC
assert(unixEpoch.millisecondsSinceEpoch == 0);</screen>

      <para>Use the Duration class to calculate the difference between two
      dates and to shift a date forward or backwards:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/date.dart
</remark>var y2k = new DateTime.utc(2000);

// Add one year.
var y2001 = y2k.add(const Duration(days: 366));
assert(y2001.year == 2001);

// Subtract 30 days.
var december2000 = y2001.subtract(const Duration(days: 30));
assert(december2000.year == 2000);
assert(december2000.month == 12);

// Calculate the difference between two dates.
// Returns a Duration object.
var duration = y2001.difference(y2k);
assert(duration.inDays == 366); // y2k was a leap year.</screen>

      <para>Refer to the API docs for <ulink
      url="http://api.dartlang.org/dart_core/DateTime.html">DateTime</ulink>
      and <ulink
      url="http://api.dartlang.org/dart_core/Duration.html">Duration</ulink>
      for a full list of methods.</para>
    </sect2>

    <sect2 id="ch03-utility-interfaces">
      <title>Utility Classes</title>

      <para>The core library contains various utility classes, useful for
      sorting, mapping values, and iterating.</para>

      <sect3 id="ch03-comparing-objects">
        <title>Comparing objects</title>

        <para>Implement the <ulink
        url="http://api.dartlang.org/dart_core/Comparable.html">Comparable</ulink>
        interface to indicate that an object can be compared to another
        object, usually for sorting. The <literal>compareTo()</literal> method
        returns &lt; 0 for <emphasis>smaller</emphasis>, 0 for the
        <emphasis>same</emphasis>, and &gt; 0 for
        <emphasis>bigger</emphasis>.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/comparable.dart
</remark>class Line implements Comparable {
  final length;
  const Line(this.length);
  int compareTo(Line other) =&gt; length - other.length;
}

main() {
  var short = const Line(1);
  var long = const Line(100);
  assert(short.compareTo(long) &lt; 0);
}</screen>
      </sect3>

      <sect3 id="ch03-implementing-map-keys">
        <title>Implementing map keys</title>

        <para>Each object in Dart automatically provides an integer hash code,
        and thus can be used as a key in a map. However, you can override the
        <literal>hashCode</literal> getter to generate a custom hash code. If
        you do, be sure to override the <literal moreinfo="none">==</literal>
        operator, as well. Objects that are equal (via <literal
        moreinfo="none">==</literal>) must have identical hash codes. A hash
        code doesn’t have to be unique, but it should be well
        distributed.</para>

        <remark>Note: There’s disagreement over whether to include identical()
        in the == implementation. It might improve speed. They don’t do
        identical() automatically because, by convention, NaN != NaN.</remark>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/map-keys.dart
</remark>class Person {
  String firstName, lastName;

  Person(this.firstName, this.lastName);

  // Override hashCode using strategy from Effective Java, Chapter 11.
  int get hashCode {
    int result = 17;
    result = 37 * result + firstName.hashCode;
    result = 37 * result + lastName.hashCode;
    return result;
  }

  // Always implement operator== if you override hashCode.
  bool operator==(other) {
    if (identical(other, this)) return true;
    return (other.firstName == firstName &amp;&amp; other.lastName == lastName);
  }
}

main() {
  var p1 = new Person('bob', 'smith');
  var p2 = new Person('bob', 'smith');
  assert(p1.hashCode == p2.hashCode);
}</screen>
      </sect3>

      <sect3 id="ch03-iteration">
        <title>Iteration</title>

        <para>The <ulink
        url="http://api.dartlang.org/dart_core/Iterable.html">Iterable</ulink>
        and <ulink
        url="http://api.dartlang.org/dart_core/Iterator.html">Iterator</ulink>
        classes support for-in loops. Extend (if possible) or implement
        Iterable whenever you create a class that can provide Iterators for
        use in for-in loops. Implement Iterator to define the actual iteration
        ability.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/iterator.dart
</remark>class Process {
  // Represents a process...
}

class ProcessIterator implements Iterator&lt;Process&gt; {
  Process current;
  bool moveNext() {
    return false;
  }
}

// A mythical class that lets you iterate through all processes.
// Extends an Iterable subclass.
class Processes extends DoubleLinkedQueue&lt;Process&gt; {
  final Iterator&lt;Process&gt; iterator = new ProcessIterator();
}

main() {
  // Iterable objects can be used with for-in.
  for (var process in new Processes()) {
    // Do something with the process.
  }
}</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-exceptions">
      <title>Exceptions</title>

      <para>The Dart core library defines many common exceptions and errors.
      Exceptions are considered conditions that you can plan ahead for and
      catch. Errors are conditions that you don’t expect or plan for.</para>

      <para>A couple of the most common errors are:</para>

      <variablelist>
        <varlistentry>
          <term><ulink
          url="http://api.dartlang.org/dart_core/NoSuchMethodError.html">NoSuchMethodError</ulink></term>

          <listitem>
            <para>Thrown when a receiving object (which might be null) does
            not implement a <phrase
            role="keep-together">method</phrase>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><ulink
          url="http://api.dartlang.org/dart_core/ArgumentError.html">ArgumentError</ulink></term>

          <listitem>
            <para>Can be thrown by a method that encounters an unexpected
            argument.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Throwing an application-specific exception is a common way to
      indicate that an error has occurred. You can define a custom exception
      by implementing the Exception <phrase
      role="keep-together">interface</phrase>:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/exceptions.dart
</remark>class FooException implements Exception {
  final String msg;
  const FooException([this.msg]);
  String toString() =&gt; msg == null ? 'FooException' : msg;
}</screen>

      <para>For more information, see <xref linkend="exceptions" /> and the
      <ulink url="http://api.dartlang.org/dart_core/Exception.html">Exception
      API docs.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch03-asynchronous-programming">
    <title>dart:async - Asynchronous Programming</title>

    <para>Asynchronous programming often uses callback functions, but Dart
    provides alternatives: <ulink
    url="http://api.dartlang.org/dart_async/Future.html">Future</ulink> and
    <ulink url="http://api.dartlang.org/dart_async/Stream.html">Stream</ulink>
    objects. A Future is like a promise for a result to be provided sometime
    in the future. A Stream is a way to get a sequence of values, such as
    events. Future, Stream, and more are in the <ulink
    url="http://api.dartlang.org/dart_async.html">dart:async</ulink>
    library.</para>

    <para>The dart:async library works in both web apps and command-line apps.
    To use it, import dart:async:</para>

    <screen format="linespecific"><remark>lang-dart</remark><remark>
</remark>import 'dart:async';</screen>

    <sect2 id="ch03-futures">
      <title>Future</title>

      <para>Future objects appear throughout the Dart libraries, often as the
      object returned by an asynchronous method. When a future
      <emphasis>completes</emphasis>, its value is ready to use.</para>

      <sect3 id="ch03-future-example">
        <title>Basic Usage</title>

        <para><phrase role="keep-together">Use <literal>then()</literal> to
        schedule code that runs when the future completes. For example,
        <literal>HttpRequest.getString()</literal> returns a Future, since
        HTTP requests can take a while. Using <literal>then()</literal> lets
        you run some code when that Future has completed and the promised
        string value is available:</phrase></para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/ch03_4_async/web/ch03_4_async.dart
</remark>HttpRequest.getString(url)
  .then((String result) {
    print(result); });
  // Should handle errors here</screen>

        <para>Use <literal>catchError()</literal> to handle any errors or
        exceptions that a Future object might throw. Be sure to invoke
        <literal>catchError()</literal> on the result of
        <literal>then()</literal>—not on the result of the original Future.
        <remark>{PENDING: What are the symptoms when you do it
        wrong?}</remark></para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/ch03_4_async/web/ch03_4_async.dart
</remark>HttpRequest.getString(url)
  .then((String result) {  // callback function
    print(result); })
  .catchError((e) {
    // Handle or ignore the error.
  });</screen>

        <para>The <literal>then().catchError()</literal> pattern is the
        asynchronous version of
        <literal>try</literal>-<literal>catch</literal>.</para>
      </sect3>

      <sect3 id="ch03-chaining-multiple-async-methods">
        <title>Chaining Multiple Asynchronous Methods</title>

        <para>The <literal>then()</literal> method returns a Future, providing
        a useful way to run multiple asynchronous functions in a certain
        order. If the callback registered with <literal>then()</literal>
        returns a Future, then it is simply returned as-is by
        <literal>then()</literal>. If the callback returns a value of any
        other type, a new Future instance is created and is completed with the
        value.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/futures.dart
</remark>Future result = costlyQuery();

return result.then((value) =&gt; expensiveWork())
             .then((value) =&gt; lengthyComputation())
             .then((value) =&gt; print('done!'))
             .catchError((exception) =&gt; print('DOH!'));</screen>

        <para>In the above example, the methods run in the following
        order:</para>

        <orderedlist continuation="restarts" inheritnum="ignore"
                     numeration="arabic">
          <listitem>
            <para><literal>costlyQuery()</literal></para>
          </listitem>

          <listitem>
            <para><literal>expensiveWork()</literal></para>
          </listitem>

          <listitem>
            <para><literal>lengthyComputation()</literal></para>
          </listitem>
        </orderedlist>
      </sect3>

      <sect3 id="ch03-waiting-for-multiple-futures">
        <title>Waiting for Multiple Futures</title>

        <para>Sometimes your algorithm needs to invoke many asynchronous
        functions and wait for them all to complete before continuing. Use the
        <ulink
        url="http://api.dartlang.org/dart_async/Future.html#wait"><literal>Future.wait()</literal></ulink>
        static method to manage multiple Futures and wait for them to
        complete:</para>

        <screen format="linespecific"><remark>lang-dart
<remark>ch03/futures.dart</remark>
</remark>Future deleteDone = deleteLotsOfFiles();
Future copyDone = copyLotsOfFiles();
Future checksumDone = checksumLotsOfOtherFiles();

Future.wait([deleteDone, copyDone, checksumDone]).then((List values) {
  print('Done with all the long steps');
});</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-streams">
      <title>Stream</title>

      <para>Stream objects appear throughout Dart APIs, representing sequences
      of data. For example, HTML events such as button clicks are delivered
      using streams. You can also read a file as a stream.</para>

      <sect3 id="ch03-streams-listen">
        <title>Listening for Stream Data</title>

        <para>To get each value as it arrives, subscribe to the stream using
        the <code>listen()</code> method:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>// Find a button by ID and add an event handler.
querySelector('#submitInfo').onClick.listen((e) {
  // When the button is clicked, it runs this code.
  submitData();
});</screen>

        <para>In this example, the <literal>onClick</literal> property is a
        Stream object provided by the 'submitInfo' button.</para>

        <para>If you care about only one event, you can get it using a
        property such as <literal>first</literal>, <literal>last</literal>, or
        <literal>single</literal>. To test the event before handling it, use a
        method such as <literal>firstWhere()</literal>,
        <literal>lastWhere()</literal>, or <literal>singleWhere()</literal>.
        <remark>{PENDING: example}</remark></para>

        <para>If you care about a subset of events, you can use methods such
        as <literal>skip()</literal>, <literal>skipWhile()</literal>,
        <literal>take()</literal>, <literal>takeWhile()</literal>, and
        <literal>where()</literal>. <remark>{PENDING: example}</remark></para>
      </sect3>

      <sect3 id="ch03-streams-transform">
        <title>Transforming Stream Data</title>

        <para>Often, you need to change the format of a stream's data before
        you can use it. Use the <literal>transform()</literal> method to
        produce a stream with a different type of data:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/readFile.dart
</remark>var config = new File('config.txt');
Stream&lt;List&lt;int&gt;&gt; inputStream = config.openRead();

inputStream
  .transform(UTF8.decoder)
  .transform(new LineSplitter())
  .listen(
    (String line) {...} ...);</screen>

        <para>This example uses two transformers. First it uses UTF8.decoder
        to transform the <literal>Stream&lt;List&lt;int&gt;&gt;</literal> into
        a <literal>Stream&lt;String&gt;</literal>. Then it uses a LineSplitter
        to transform the <literal>Stream&lt;String&gt;</literal> into a
        <literal>Stream&lt;List&lt;String&gt;&gt;</literal>. These
        transformers are from the dart:convert library (see <xref
        linkend="ch03-dart-convert" />).<remark> PENDING: add onDone and
        onError. (See "Streaming file contents".)</remark></para>
      </sect3>
    </sect2>

    <sect2 id="ch03-more-information-9">
      <title>More Information</title>

      <para>For some examples of using Future and Stream in command-line apps,
      see <xref
      linkend="ch03-dartio---file-and-socket-io-for-command-line-apps" />.
      Also see these articles:</para>

      <itemizedlist>
        <listitem>
          <para><ulink
          url="http://www.dartlang.org/articles/using-future-based-apis/">Using
          Future Based APIs</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.dartlang.org/articles/futures-and-error-handling/">Futures
          and Error Handling</ulink></para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.dartlang.org/articles/event-loop/">The
          Event Loop and Dart</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.dartlang.org/articles/feet-wet-streams/">Getting
          Your Feet Wet with Streams</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.dartlang.org/articles/creating-streams/">Creating
          Streams in Dart</ulink></para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="ch03-dart-math">
    <title>dart:math - Math and Random</title>

    <para>The Math library provides common functionality such as sine and
    cosine, maximum and minimum, and constants such as <emphasis>pi</emphasis>
    and <emphasis>e</emphasis>. Most of the functionality in the Math library
    is implemented as top-level functions.</para>

    <para>To use the Math library in your app, import dart:math. The following
    examples use the prefix <literal moreinfo="none">math</literal> to make
    clear which top-level functions and constants are from the Math
    library:</para>

    <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>import 'dart:math' as math;</screen>

    <sect2 id="ch03-trigonometry">
      <title>Trigonometry</title>

      <para>The Math library provides basic trigonometric functions:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>// Cosine
assert(math.cos(math.PI) == -1.0);

// Sine
var degrees = 30;
var radians = degrees * (math.PI / 180);
// radians is now 0.52359.
var sinOf30degrees = math.sin(radians);

// Truncate the decimal places to 2.
assert(double.parse(sinOf30degrees.toStringAsPrecision(2)) == 0.5);</screen>

      <note>
        <para>These functions use radians, not degrees!</para>
      </note>
    </sect2>

    <sect2 id="ch03-maximum-and-minimum">
      <title>Maximum and Minimum</title>

      <para>The Math library provides optimized <literal>max()</literal> and
      <literal>min()</literal> methods:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>assert(math.max(1, 1000) == 1000);
assert(math.min(1, -1000) == -1000);</screen>
    </sect2>

    <sect2 id="ch03-math-constants">
      <title>Math Constants</title>

      <para>Find your favorite constants—<emphasis>pi</emphasis>,
      <emphasis>e</emphasis>, and more—in the Math library:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>// See the Math library for additional constants.
print(math.E);     // 2.718281828459045
print(math.PI);    // 3.141592653589793
print(math.SQRT2); // 1.4142135623730951</screen>
    </sect2>

    <sect2 id="ch03-random-numbers">
      <title>Random Numbers</title>

      <para>Generate random numbers with the <ulink
      url="http://api.dartlang.org/dart_math/Random.html">Random</ulink>
      class. You can optionally provide a seed to the Random
      constructor.</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>var random = new math.Random();
random.nextDouble(); // Between 0.0 and 1.0: [0, 1)
random.nextInt(10);  // Between 0 and 9.</screen>

      <para>You can even generate random booleans:</para>

      <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/math-tests.dart
</remark>var random = new math.Random();
random.nextBool();  // true or false</screen>
    </sect2>

    <sect2 id="ch03-more-information-7">
      <title>More Information</title>

      <para>Refer to the <ulink
      url="http://api.dartlang.org/dart_math/index.html">Math API docs</ulink>
      for a full list of methods. Also see the API docs for<phrase
      role="keep-together"> <ulink
      url="http://api.dartlang.org/dart_core/num.html">num,</ulink></phrase>
      <ulink url="http://api.dartlang.org/dart_core/int.html">int,</ulink> and
      <ulink
      url="http://api.dartlang.org/dart_core/double.html">double.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch03-dart-html-using-html5-apis">
    <title>dart:html - Browser-Based Apps</title>

    <para>Use the <ulink
    url="http://api.dartlang.org/dart_html.html">dart:html library</ulink> to
    program the browser, manipulate objects and elements in the DOM, and
    access HTML5 APIs. <firstterm>DOM</firstterm> stands for
    <emphasis>Document Object Model</emphasis>, which describes the hierarchy
    of an HTML page.</para>

    <para>Other common uses of dart:html are manipulating styles
    (<emphasis>CSS</emphasis>), getting data using HTTP requests, and
    exchanging data using <link linkend="ch03-websockets">WebSockets</link>.
    HTML5 (and dart:html) has many additional APIs that this section doesn’t
    cover. Only web apps can use dart:html, not command-line apps.</para>

    <note>
      <para>For scalable, higher level approaches to web app UIs, see <ulink
      url="http://www.dartlang.org/polymer-dart/">Polymer.dart</ulink> and
      <ulink
      url="http://pub.dartlang.org/packages/angular">AngularDart</ulink>.</para>
    </note>

    <para>To use the HTML library in your web app, import dart:html:</para>

    <programlisting format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>import 'dart:html';</programlisting>

    <note>
      <para>Parts of the dart:html library are experimental, as noted in the
      API documentation.</para>
    </note>

    <sect2 id="ch03-manipulating-the-dom">
      <title>Manipulating the DOM</title>

      <para>To use the DOM, you need to know about
      <emphasis>windows</emphasis>, <emphasis>documents</emphasis>,
      <emphasis>elements</emphasis>, and <emphasis>nodes</emphasis>.</para>

      <para>A <ulink
      url="http://api.dartlang.org/html/Window.html">Window</ulink> object
      represents the actual window of the web browser. Each Window has a
      <literal moreinfo="none">document</literal> property (a Document
      object), which points to the document currently loaded. The Window
      object also has accessors to various APIs such as IndexedDB (for storing
      data), <literal>requestAnimationFrame()</literal> (for animations), and
      more. In tabbed browsers, each tab has its own Window object.</para>

      <para>With the <ulink
      url="http://api.dartlang.org/html/Document.html">Document</ulink>
      object, you can create and manipulate <ulink
      url="http://api.dartlang.org/html/Element.html">Elements</ulink> within
      the document. Note that the document itself is an element and can be
      manipulated.</para>

      <para>The DOM models a tree of <ulink
      url="http://api.dartlang.org/html/Node.html">Nodes.</ulink> These nodes
      are often elements, but they can also be attributes, text, comments, and
      other DOM types. Except for the root node, which has no parent, each
      node in the DOM has one parent and might have many children.</para>

      <sect3 id="ch03-finding-elements">
        <title>Finding elements</title>

        <para>To manipulate an element, you first need an object that
        represents it. You can get this object using a query.</para>

        <para>Find one or more elements using the top-level functions
        <literal>querySelector()</literal> and<literal>
        querySelectorAll()</literal>. You can query by ID, class, tag, name,
        or any combination of these. The <ulink
        url="http://www.w3.org/TR/css3-selectors/">CSS Selector Specification
        guide</ulink> defines the formats of the selectors such as using a #
        prefix to specify IDs and a period (.) for classes.</para>

        <para>The <literal>querySelector()</literal> function returns the
        first element that matches the selector, while <phrase
        role="keep-together"><literal>querySelectorAll()</literal>
        </phrase>returns a collection of elements that match the
        selector.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>Element elem1 = querySelector('#an-id');           // Find an element by id (an-id).
Element elem2 = querySelector('.a-class');         // Find an element by class (a-class).
List&lt;Element&gt; elems1 = querySelectorAll('div');    // Find all elements by tag (&lt;div&gt;).
List&lt;Element&gt; elems2 = querySelectorAll('input[type="text"]'); // Find all text inputs.

// Find all elements with the CSS class 'class' inside of a &lt;p&gt;
// that is inside an element with the ID 'id'.
List&lt;Element&gt; elems3 = querySelectorAll('#id p.class');</screen>
      </sect3>

      <sect3 id="ch03-manipulating-elements">
        <title>Manipulating elements</title>

        <para>You can use properties to change the state of an element. Node
        and its subtype Element define the properties that all elements have.
        For example, all elements have <literal
        moreinfo="none">classes</literal>, <literal
        moreinfo="none">hidden</literal>, <literal
        moreinfo="none">id</literal>, <literal
        moreinfo="none">style</literal>, and <literal
        moreinfo="none">title</literal> properties that you can use to set
        state. Subclasses of Element define additional properties, such as the
        <literal moreinfo="none">href</literal> property of <ulink
        url="http://api.dartlang.org/html/AnchorElement.html">AnchorElement.</ulink></para>

        <para>Consider this example of specifying an anchor element in
        HTML:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>&lt;a id="example" href="http://example.com"&gt;link text&lt;/a&gt;</screen>

        <para>This &lt;a&gt; tag specifies an element with an <literal
        moreinfo="none">href</literal> attribute and a text node (accessible
        via a <literal moreinfo="none">text</literal> property) that contains
        the string “linktext”. To change the URL that the link goes to, you
        can use AnchorElement’s <literal moreinfo="none">href</literal>
        property:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>querySelector('#example').href = 'http://dartlang.org';</screen>

        <para>Often you need to set properties on multiple elements. For
        example, the following code sets the <literal
        moreinfo="none">hidden</literal> property of all elements that have a
        class of “mac”, “win”, or “linux”. Setting the <literal
        moreinfo="none">hidden</literal> property to true has the same effect
        as adding <literal moreinfo="none">display:none</literal> to <phrase
        role="keep-together">the CSS</phrase>.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>&lt;!-- In HTML: --&gt;
&lt;p&gt;
  &lt;span class="os linux"&gt;Words for Linux&lt;/span&gt;
  &lt;span class="os mac"&gt;Words for Mac&lt;/span&gt;
  &lt;span class="os win"&gt;Words for Windows&lt;/span&gt;
&lt;/p&gt;
<remark>
</remark>// In Dart:
final osList = ['mac', 'win', 'linux'];

var userOs = 'linux'; // In real code you'd programmatically determine this.

for (var os in osList) {            // For each possible OS...
  bool shouldShow = (os == userOs); // Does this OS match the user's OS?
  for (var elem in querySelectorAll('.$os')) { // Find all elements for this OS.
    elem.hidden = !shouldShow;      // Show or hide each element.
  }
}</screen>

        <para>When the right property isn’t available or convenient, you can
        use Element’s <literal moreinfo="none">attributes</literal> property.
        This property is a <literal>Map&lt;String, String&gt;</literal>, where
        the keys are attribute names. For a list of attribute names and their
        meanings, see the <ulink
        url="https://developer.mozilla.org/en/HTML/Attributes">MDN Attributes
        page.</ulink> Here’s an example of setting an attribute’s
        value:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>elem.attributes['someAttribute'] = 'someValue';</screen>
      </sect3>

      <sect3 id="ch03-creating-elements">
        <title>Creating elements</title>

        <para>You can add to existing HTML pages by creating new elements and
        attaching them to the DOM. Here’s an example of creating a paragraph
        (&lt;p&gt;) element:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>var elem = new ParagraphElement();
elem.text = 'Creating is easy!';</screen>

        <para>You can also create an element by parsing HTML text. Any child
        elements are also parsed and created.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>var elem2 = new Element.html('&lt;p&gt;Creating &lt;em&gt;is&lt;/em&gt; easy!&lt;/p&gt;');</screen>

        <para>Note that elem2 is a ParagraphElement in the above
        example.</para>

        <para>Attach the newly created element to the document by assigning a
        parent to the element. You can add an element to any existing
        element’s children. In the following example, <literal
        moreinfo="none">body</literal> is an element, and its child elements
        are accessible (as a List&lt;Element&gt;) from the <literal
        moreinfo="none">children</literal> property.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>document.body.children.add(elem2);</screen>
      </sect3>

      <sect3 id="ch03-adding-replacing-and-removing-nodes">
        <title>Adding, replacing, and removing nodes</title>

        <para>Recall that elements are just a kind of node. You can find all
        the children of a node using the <literal
        moreinfo="none">nodes</literal> property of Node, which returns a
        List&lt;Node&gt;. Once you have this list, you can use the usual List
        methods and operators to manipulate the children of the node.</para>

        <para>To add a node as the last child of its parent, use the List
        <literal>add()</literal> method:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>// Find the parent by ID, and add elem as its last child.
querySelector('#inputs').nodes.add(elem);</screen>

        <para>To replace a node, use the Node <literal>replaceWith()</literal>
        method:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>// Find a node by ID, and replace it in the DOM.
querySelector('#status').replaceWith(elem);</screen>

        <para>To remove a node, use the Node <literal>remove()</literal>
        method:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>// Find a node by ID, and remove it from the DOM.
querySelector('#expendable').remove();</screen>
      </sect3>

      <sect3 id="ch03-manipulating-styles">
        <title>Manipulating CSS styles</title>

        <para>CSS, or <emphasis>cascading style sheets</emphasis>, defines the
        presentation styles of DOM elements. You can change the appearance of
        an element by attaching ID and class attributes to it.</para>

        <para>Each element has a <literal moreinfo="none">classes</literal>
        field, which is a list. Add and remove CSS classes simply by adding
        and removing strings from this collection. For example, the following
        sample adds the <literal moreinfo="none">warning</literal> class to an
        element:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>var element = querySelector('#message');
element.classes.add('warning');</screen>

        <para>It’s often very efficient to find an element by ID. You can
        dynamically set an element ID with the <literal
        moreinfo="none">id</literal> property:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>var message = new DivElement();
message.id = 'message2';
message.text = 'Please subscribe to the Dart mailing list.';</screen>

        <para>You can reduce the redundant text in this example by using
        method cascades:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>var message = new DivElement()
    ..id = 'message2'
    ..text = 'Please subscribe to the Dart mailing list.';</screen>

        <para>While using IDs and classes to associate an element with a set
        of styles is best practice, sometimes you want to attach a specific
        style directly to the element:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>message.style
    ..fontWeight = 'bold'
    ..fontSize = '3em';</screen>
      </sect3>

      <sect3 id="ch03-handling-events">
        <title>Handling events</title>

        <para>To respond to external events such as clicks, changes of focus,
        and selections, add an event listener. You can add an event listener
        to any element on the page. Event dispatch and propagation is a
        complicated subject; <ulink
        url="http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture">research
        the details</ulink> if you’re new to web programming.</para>

        <para>Add an event handler using <literal
        moreinfo="none">element.on<replaceable>Event</replaceable>.listen(<replaceable>function</replaceable>)</literal>,
        where <literal
        moreinfo="none"><replaceable>Event</replaceable></literal> is the
        event name and <literal
        moreinfo="none"><replaceable>function</replaceable></literal> is the
        event handler.</para>

        <para>For example, here’s how you can handle clicks on a
        button:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>// Find a button by ID and add an event handler.
querySelector('#submitInfo').onClick.listen((e) {
  // When the button is clicked, it runs this code.
  submitData();
});</screen>

        <para>Events can propagate up and down through the DOM tree. To
        discover which element originally fired the event, use <literal
        moreinfo="none">e.target</literal>:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_html.dart
</remark>document.body.onClick.listen((e) {
  var clickedElem = e.target;
  print('You clicked the ${clickedElem.id} element.');
});</screen>

        <para>To see all the events for which you can register an event
        listener, look for "on<replaceable>EventType</replaceable>" properties
        in the API docs for <ulink
        url="http://api.dartlang.org/dart_html/Element.html">Element</ulink>
        and its subclasses. Some common events include:</para>

        <itemizedlist>
          <listitem>
            <para>change</para>
          </listitem>

          <listitem>
            <para>blur</para>
          </listitem>

          <listitem>
            <para>keyDown</para>
          </listitem>

          <listitem>
            <para>keyUp</para>
          </listitem>

          <listitem>
            <para>mouseDown</para>
          </listitem>

          <listitem>
            <para>mouseUp</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>

    <sect2 id="ch03-httprequest">
      <title>Using HTTP Resources with HttpRequest</title>

      <para>Formerly known as XMLHttpRequest, the <ulink
      url="http://api.dartlang.org/dart_html/HttpRequest.html">HttpRequest</ulink>
      class gives you access to HTTP resources from within your browser-based
      app. Traditionally, AJAX-style apps make heavy use of HttpRequest. Use
      HttpRequest to dynamically load JSON data or any other resource from a
      web server. You can also dynamically send data to a web server.</para>

      <para>The following examples assume all resources are served from the
      same web server that hosts the script itself. Due to security
      restrictions in the browser, the HttpRequest class can’t easily use
      resources that are hosted on an origin that is different from the origin
      of the app. If you need to access resources that live on a different web
      server, you need to either use a technique called JSONP or enable CORS
      headers on the remote resources.</para>

      <sect3 id="_getting_data_from_the_server">
        <title>Getting data from the server</title>

        <para>The HttpRequest static method <literal>getString()</literal> is
        an easy way to get data from a web server. Use
        <literal>then()</literal> after <literal>getString()</literal> to
        specify the function that handles the string data.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_2_html.dart
</remark>import 'dart:html';
import 'dart:async';

// A JSON-formatted file in the same location as this page.
var uri = 'data.json';

main() {
  // Read a JSON file.
  HttpRequest.getString(uri).then(processString);
}

processString(String jsonText) {
  parseText(jsonText);
}</screen>

        <para>The function you specify (in the example,
        <literal>processString()</literal>) runs when the data at the
        specified URI is successfully retrieved. In this case, we are
        dynamically loading a JSON file. Information about the JSON API is in
        <xref linkend="ch03-json" />.</para>

        <para>Add <literal>.catchError()</literal> after the call to
        <literal>.then()</literal> to specify an error handler:</para>

        <programlisting role="keep-together"><remark>lang-dart
</remark><remark>ch03_html/ch03_2_html.dart
</remark>...
HttpRequest.getString(uri)
    .then(processString)
    .catchError(handleError);
...
handleError(error) {
  print('Uh oh, there was an error.');
  print(error.toString());
}</programlisting>

        <para>If you need access to the HttpRequest, not just the text data it
        retrieves, you can use the <literal>request()</literal> static method
        instead of <literal>getString()</literal>. Here’s an example of
        reading XML data:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03_html/ch03_2_html.dart
</remark>import 'dart:html';
import 'dart:async';

// An XML-formatted file in the same location as this page.
var xmlUri = 'data.xml';

main() {
  // Read an XML file.
  HttpRequest.request(xmlUri)
      .then(processRequest)
      .catchError(handleError);
}

processRequest(HttpRequest request) {
  var xmlDoc = request.responseXml;
  try {
    var license = xmlDoc.querySelector('license').text;
    print('License: $license');
  } catch(e) {
    print('$xmlUri doesn\'t have correct XML formatting.');
  }
}
...</screen>

        <para>You can also use the full API to handle more interesting cases.
        For example, you can set arbitrary headers.</para>

        <para>The general flow for using the full API of HttpRequest is as
        follows:</para>

        <orderedlist continuation="restarts" inheritnum="ignore"
                     numeration="arabic">
          <listitem>
            <para>Create the HttpRequest object.</para>
          </listitem>

          <listitem>
            <para>Open the URL with either <literal
            moreinfo="none">GET</literal> or <literal
            moreinfo="none">POST</literal>.</para>
          </listitem>

          <listitem>
            <para>Attach event handlers.</para>
          </listitem>

          <listitem>
            <para>Send the request.</para>
          </listitem>
        </orderedlist>

        <para>For example:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>dart-tutorials-samples/web/portmanteaux/portmanteaux.dart
</remark>import 'dart:html';
...
var httpRequest = new HttpRequest()
    ..open('POST', dataUrl)
    ..onLoadEnd.listen((_) =&gt; requestComplete(httpRequest))
    ..send(encodedData);
</screen>
      </sect3>

      <sect3 id="_sending_data_to_the_server">
        <title>Sending data to the server</title>

        <para>HttpRequest can send data to the server using the HTTP method
        POST. For example, you might want to dynamically submit data to a form
        handler. Sending JSON data to a RESTful web service is another common
        example.</para>

        <para>Submitting data to a form handler requires you to provide
        name-value pairs as URI-encoded strings. (Information about the URI
        class is in <xref linkend="ch03-uri" />.) You must also set the
        <literal moreinfo="none">Content-type</literal> header to <literal
        moreinfo="none">application/x-www-form-urlencode</literal> if you wish
        to send data to a form handler.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/ch03/ch03_3_html/json-send-to-server.dart
</remark>import 'dart:html';

String encodeMap(Map data) {
  return data.keys.map((k) {
    return '${Uri.encodeComponent(k)}=${Uri.encodeComponent(data[k])}';
  }).join('&amp;');
}

loadEnd(HttpRequest request) {
  if (request.status != 200) {
    print('Uh oh, there was an error of ${request.status}');
  } else {
    print('Data has been posted');
  }
}

main() {
  var dataUrl = '/registrations/create';
  var data = {'dart': 'fun', 'editor': 'productive'};
  var encodedData = encodeMap(data);

  var httpRequest = new HttpRequest();
  httpRequest.open('POST', dataUrl);
  httpRequest.setRequestHeader('Content-type', 
                               'application/x-www-form-urlencoded');
  httpRequest.onLoadEnd.listen((e) =&gt; loadEnd(httpRequest));
  httpRequest.send(encodedData);
}</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-websockets">
      <title>Sending and Receiving Real-Time Data with WebSockets</title>

      <para>A WebSocket allows your web app to exchange data with a server
      interactively—no polling necessary. A server creates the WebSocket and
      listens for requests on a URL that starts with <emphasis
      role="strong">ws://</emphasis>—for example, ws://127.0.0.1:1337/ws. The
      data transmitted over a WebSocket can be a string, a blob, or an <ulink
      url="http://api.dartlang.org/html/ArrayBuffer.html">ArrayBuffer.</ulink>
      Often, the data is a JSON-formatted string.</para>

      <para>To use a WebSocket in your web app, first create a <ulink
      url="http://api.dartlang.org/html/WebSocket.html">WebSocket</ulink>
      object, passing the WebSocket URL as an argument:</para>

      <screen format="linespecific"><remark>lang-dart
github.com/dart-lang/dart-samples/.../web/html5/websockets/basics/websocket_sample.dart
</remark>var ws = new WebSocket('ws://echo.websocket.org');</screen>

      <sect3 id="ch03-sending-data">
        <title>Sending data</title>

        <para>To send string data on the WebSocket, use the
        <literal>send()</literal> method:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>github.com/dart-lang/dart-samples/.../web/html5/websockets/basics/websocket_sample.dart
</remark>ws.send('Hello from Dart!');</screen>
      </sect3>

      <sect3 id="ch03-receiving-data">
        <title>Receiving data</title>

        <para>To receive data on the WebSocket, register a listener for
        message events:</para>

        <screen format="linespecific"><remark>lang-dart
<remark>github.com/dart-lang/dart-samples/.../web/html5/websockets/basics/websocket_sample.dart
</remark></remark>ws.onMessage.listen((MessageEvent e) {
  print('Received message: ${e.data}');
});</screen>

        <para>The message event handler receives a <ulink
        url="http://api.dartlang.org/html/MessageEvent.html">MessageEvent</ulink>
        object. This object’s <literal moreinfo="none">data</literal> field
        has the data from the server.</para>
      </sect3>

      <sect3 id="ch03-handling-websocket-events">
        <title>Handling WebSocket events</title>

        <para><ulink
        url="http://api.dartlang.org/html/WebSocketEvents.html">WebSocketEvents</ulink>
        defines the WebSocket events your app can handle: open, close, error,
        and (as shown above) message. Here’s an example of a method that
        creates a WebSocket object and registers handlers for open, close,
        error, and message events:</para>

        <screen format="linespecific"><remark>lang-dart
<remark>github.com/dart-lang/dart-samples/.../web/html5/websockets/basics/websocket_sample.dart
</remark></remark>void initWebSocket([int retrySeconds = 2]) {
  var reconnectScheduled = false;

  print("Connecting to websocket");
  ws = new WebSocket('ws://echo.websocket.org');

  void scheduleReconnect() {
    if (!reconnectScheduled) {
      new Timer(new Duration(milliseconds: 1000 * retrySeconds), () =&gt; initWebSocket(retrySeconds * 2));
    }
    reconnectScheduled = true;
  }

  ws.onOpen.listen((e) {
    print('Connected');
    ws.send('Hello from Dart!');
  });

  ws.onClose.listen((e) {
    print('Websocket closed, retrying in $retrySeconds seconds');
    scheduleReconnect();
  });

  ws.onError.listen((e) {
    print("Error connecting to ws");
    scheduleReconnect();
  });

  ws.onMessage.listen((MessageEvent e) {
    print('Received message: ${e.data}');
  });
}</screen>

        <para>For more information and examples of using WebSockets, see the
        <ulink url="http://www.dartlang.org/samples/">Dart Code
        Samples.</ulink></para>
      </sect3>
    </sect2>

    <sect2 id="ch03-more-information-html">
      <title>More information</title>

      <para>This section barely scratched the surface of using the dart:html
      library. For more information, see the documentation for <ulink
      url="http://api.dartlang.org/dart_html.html">dart:html</ulink> and the
      code and explanations in the <ulink
      url="http://www.dartlang.org/samples/">Dart Code Samples.</ulink> Dart
      has additional libraries for more specialized web APIs, such as <ulink
      url="http://api.dartlang.org/dart_web_audio.html">web audio,</ulink>
      <ulink
      url="http://api.dartlang.org/dart_indexed_db.html">IndexedDB</ulink>,
      and <ulink
      url="http://api.dartlang.org/dart_web_gl.html">WebGL</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="ch03-dartio---file-and-socket-io-for-command-line-apps">
    <title>dart:io - I/O for Command-Line Apps</title>

    <para>The <ulink url="http://api.dartlang.org/io.html">dart:io
    library</ulink> provides APIs to deal with files, directories, processes,
    sockets, and HTTP connections. Only command-line apps can use dart:io—not
    web apps.</para>

    <para>In general, the dart:io library implements and promotes an
    asynchronous API. Synchronous methods can easily block the event loop,
    making it difficult to scale server applications. Therefore, most
    operations return results via callbacks or Future objects, a pattern
    common with modern server platforms such as Node.js.</para>

    <para>The few synchronous methods in the dart:io library are clearly
    marked with a Sync suffix on the method name. We don’t cover them
    here.</para>

    <note>
      <para>Only command-line apps can import and use <literal
      moreinfo="none">dart:io</literal>.</para>
    </note>

    <sect2 id="ch03-files-and-directories">
      <title>Files and Directories</title>

      <para>The I/O library enables command-line apps to read and write files
      and browse directories. You have two choices for reading the contents of
      a file: all at once, or streaming. Reading a file all at once requires
      enough memory to store all the contents of the file. If the file is very
      large or you want to process it while reading it, you should use a
      Stream, as described in <xref
      linkend="ch03-streaming-file-contents" />.</para>

      <sect3 id="ch03-reading-a-file-as-text">
        <title>Reading a file as text</title>

        <para>When reading a text file, you can read the entire file contents
        with <literal>readAsString()</literal>. When the individual lines are
        important, you can use <literal>readAsLines()</literal>. In both
        cases, a Future object is returned that provides the contents of the
        file as one or more strings.</para>

        <screen format="linespecific"><remark>lang-dart
ch03/textRead.dart
</remark>import 'dart:io';

main() {
  var config = new File('config.txt');

  // Put the whole file in a single string.
  config.readAsString().then((String contents) {
    print('The entire file is ${contents.length} characters long');
  });

  // Put each line of the file into its own string.
  config.readAsLines().then((List&lt;String&gt; lines) {
    print('The entire file is ${lines.length} lines long');
  });
}</screen>
      </sect3>

      <sect3 id="ch03-reading-a-file-as-binary">
        <title>Reading a file as binary</title>

        <para>The following code reads an entire file as bytes into a list of
        ints. The call to <phrase
        role="keep-together"><literal>readAsBytes()</literal></phrase> returns
        a Future, which provides the result when it’s available.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/binaryRead.dart
</remark>import 'dart:io';

main() {
  var config = new File('config.txt');

  config.readAsBytes().then((List&lt;int&gt; contents) {
    print('The entire file is ${contents.length} bytes long');
  });
}</screen>
      </sect3>

      <sect3 id="ch03-handling-errors">
        <title>Handling errors</title>

        <para>To capture errors so they don't result in exceptions, you can
        register a <literal moreinfo="none">catchError</literal>
        handler:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/fileErrors.dart
</remark>import 'dart:io';

main() {
  var config = new File('config.txt');
  config.readAsString().then((String contents) {
    print(contents);
  }).catchError((e) {
    print(e);
  });
}</screen>
      </sect3>

      <sect3 id="ch03-streaming-file-contents">
        <title>Streaming file contents</title>

        <para>Use a Stream to read a file, a little at a time. The <literal
        moreinfo="none">listen()</literal> method specifies a handler to be
        called when data is available. When the Stream is finished reading the
        file, the <literal moreinfo="none">onDone</literal> callback
        executes.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/readFile.dart
</remark>import 'dart:io';
import 'dart:convert';
import 'dart:async';

main() {
  var config = new File('config.txt');
  Stream&lt;List&lt;int&gt;&gt; inputStream = config.openRead();

  inputStream
    .transform(UTF8.decoder)
    .transform(new LineSplitter())
    .listen(
      (String line) { 
        print('Read ${line.length} bytes from stream');
      },
      onDone: () { print('file is now closed'); },
      onError: (e) { print(e.toString()); });
}</screen>
      </sect3>

      <sect3 id="ch03-writing-file-contents">
        <title>Writing file contents</title>

        <para>You can use an <ulink
        url="http://api.dartlang.org/dart_io/IOSink.html">IOSink</ulink> to
        write data to a file. Use the File <literal>openWrite()</literal>
        method to declare a mode and get an IOSink that you can write to. The
        default mode, <literal moreinfo="none">FileMode.WRITE</literal>,
        completely overwrites existing data in the file.</para>

        <programlisting role="keep-together"><remark>lang-dart
</remark><remark>ch03/writeFile.dart
</remark>var logFile = new File('log.txt');
var sink = logFile.openWrite();
sink.write('FILE ACCESSED ${new DateTime.now()}\n');
sink.close();</programlisting>

        <para>To add to the end of the file, use the optional
        <literal>mode</literal> parameter to specify
        <literal>FileMode.APPEND</literal>:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/writeFile.dart
</remark>var sink = logFile.openWrite(mode: FileMode.APPEND); </screen>

        <para>To write binary data, use <literal
        moreinfo="none">add(List&lt;int&gt; data)</literal>.</para>
      </sect3>

      <sect3 id="ch03-listing-files-in-a-directory">
        <title>Listing files in a directory</title>

        <para>Finding all files and subdirectories for a directory is an
        asynchronous operation. The <literal>list()</literal> method returns a
        Stream on which you can register handlers (using
        <literal>listen()</literal>) to be notified when a file or directory
        is encountered.</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/listFiles.dart
</remark>import 'dart:io';
import 'dart:async';

main() {
  var dir = new Directory('/tmp');
  var contentsStream = dir.list(recursive:true);
  contentsStream.listen(
    (FileSystemEntity f) {
      if (f is File) {
        print('Found file ${f.path}');
      } else if (f is Directory) {
        print('Found dir ${f.path}');
      }
    },
    onError: (e) { print(e.toString()); }
  );
}</screen>
      </sect3>

      <sect3 id="ch03-other-common-functionality">
        <title>Other common functionality</title>

        <para>The File and Directory classes contain other functionality,
        including but not limited to:</para>

        <itemizedlist role="keep-together">
          <listitem>
            <para>Creating a file or directory: <literal>create()</literal> in
            File and Directory</para>
          </listitem>

          <listitem>
            <para>Deleting a file or directory: <literal>delete()</literal> in
            File and Directory</para>
          </listitem>

          <listitem>
            <para>Getting the length of a file: <literal>length()</literal> in
            File</para>
          </listitem>

          <listitem>
            <para>Getting random access to a file: <literal>open()</literal>
            in File</para>
          </listitem>
        </itemizedlist>

        <para>Refer to the API docs for <ulink
        url="http://api.dartlang.org/io/File.html">File</ulink> and <ulink
        url="http://api.dartlang.org/io/Directory.html">Directory</ulink> for
        a full list of methods.</para>
      </sect3>
    </sect2>

    <sect2 id="ch03-io-http">
      <title>HTTP Clients and Servers</title>

      <para>The dart:io library provides classes that command-line apps can
      use for accessing HTTP resources, as well as running HTTP
      servers.</para>

      <sect3 id="_http_server">
        <title>HTTP server</title>

        <para>The <ulink
        url="http://api.dartlang.org/dart_io/HttpServer.html">HttpServer</ulink>
        class provides the low-level functionality for building web servers.
        You can match request handlers, set headers, stream data, and
        more.</para>

        <para>The following sample web server can return only simple text
        information. This server listens on port 8888 and address 127.0.0.1
        (localhost), responding to requests for the path <literal
        moreinfo="none">/languages/dart</literal>. All other requests are
        handled by the default request handler, which returns a response code
        of 404 (not found).</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/httpServer.dart
</remark>import 'dart:io';

main() {
  dartHandler(HttpRequest request) {
    print('New request');
    request.response.write('Dart is optionally typed');
    request.response.close();
  };

  HttpServer.bind('127.0.0.1', 8888).then((HttpServer server) {
    server.listen((request) { 
      print("got request");
      if (request.uri.path == '/languages/dart') {
        dartHandler(request);
      } else {
        request.response.write('Not found');
        request.response.statusCode = HttpStatus.NOT_FOUND;
        request.response.close();
      }
    });
  });
}</screen>

        <para>For a more comprehensive HTTP server, see the <ulink
        url="https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/samples/dartiverse_search/">dartiverse_search</ulink>
        example, which uses additional packages such as <ulink
        url="https://pub.dartlang.org/packages/http_server">http_server</ulink>
        and <ulink
        url="http://pub.dartlang.org/packages/route">route</ulink>.<remark>
        {PENDING: point to the <ulink
        url="http://www.dartlang.org/samples/">Dart Code Samples</ulink>
        instead? Need to come up with a good way of pointing to
        samples.}</remark></para>
      </sect3>

      <sect3 id="_http_client">
        <title>HTTP client</title>

        <para>The <ulink
        url="http://api.dartlang.org/dart_io/HttpClient.html">HttpClient</ulink>
        class helps you connect to HTTP resources from your Dart command-line
        or server-side application. You can set headers, use HTTP methods, and
        read and write data. The HttpClient class does not work in
        browser-based apps. When programming in the browser, use the <link
        linkend="ch03-httprequest">HttpRequest class</link>. Here’s an example
        of using HttpClient:</para>

        <screen format="linespecific"><remark>lang-dart
</remark><remark>ch03/httpClient.dart
</remark>import 'dart:io';
import 'dart:convert';

main() {
  var url = Uri.parse('http://127.0.0.1:8888/languages/dart');
  var httpClient = new HttpClient();
  httpClient.getUrl(url)
    .then((HttpClientRequest request) {
      print('have request');
      return request.close();
    })
    .then((HttpClientResponse response) {
      print('have response');
      response.transform(UTF8.decoder).toList().then((data) {
        var body = data.join('');
        print(body);
        httpClient.close();
      });
    });
}</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-more-information-io">
      <title>More Information</title>

      <para>Besides the APIs discussed in this section, the dart:io library
      also provides APIs for <ulink
      url="http://api.dartlang.org/io/Process.html">processes,</ulink> <ulink
      url="http://api.dartlang.org/io/Socket.html">sockets,</ulink> and <ulink
      url="http://api.dartlang.org/io/WebSocket.html">web
      sockets.</ulink></para>

      <para>For more examples of using dart:io, see the <ulink
      url="http://www.dartlang.org/samples/">Dart Code Samples.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch03-dart-convert">
    <title>dart:convert - Decoding and Encoding JSON, UTF-8, and more</title>

    <para>The <ulink
    url="http://api.dartlang.org/dart_convert.html">dart:convert
    library</ulink> has converters for JSON and UTF-8, as well as support for
    creating additional converters. JSON is a simple text format for
    representing structured objects and collections. UTF-8 is a common
    variable-width encoding that can represent every character in the Unicode
    character set.</para>

    <para>The dart:convert library works in both web apps and command-line
    apps. To use it, import dart:convert.</para>

    <sect2 id="ch03-json">
      <title>Decoding and Encoding JSON</title>

      <para>Decode a JSON-encoded string into a Dart object with
      <literal>JSON.decode()</literal>:</para>

      <screen format="linespecific"><remark>lang-dart
ch03/jsonParse.dart
</remark>import 'dart:convert' show JSON;

main() {
  // NOTE: Be sure to use double quotes ("), not single quotes ('),
  // inside the JSON string. This string is JSON, not Dart.
  var jsonString = '''
  [
    {"score": 40},
    {"score": 80}
  ]
  ''';

  var scores = JSON.decode(jsonString);
  assert(scores is List);

  var firstScore = scores[0];
  assert(firstScore is Map);
  assert(firstScore['score'] == 40);
}</screen>

      <para>Encode a supported Dart object into a JSON-formatted string with
      <literal>JSON.encode()</literal>:</para>

      <programlisting role="keep-together"><remark>lang-dart
ch03/jsonStringify.dart
</remark>import 'dart:convert' show JSON;

main() {
  var scores = [
    {'score': 40},
    {'score': 80},
    {'score': 100, 'overtime': true, 'special_guest': null}
  ];

  var jsonText = JSON.encode(scores);
  assert(jsonText == '[{"score":40},{"score":80},'
                     '{"score":100,"overtime":true,'
                     '"special_guest":null}]');
}</programlisting>

      <para>Only objects of type int, double, String, bool, null, List, or Map
      (with string keys) are directly encodable into JSON. List and Map
      objects are encoded recursively.</para>

      <para>You have two options for encoding objects that aren't directly
      encodable. The first is to invoke <literal>encode()</literal> with a
      second argument: a function that returns an object that is directly
      encodable. Your second option is to omit the second argument, in which
      case the encoder calls the object's <literal>toJson()</literal>
      method.</para>
    </sect2>

    <sect2 id="ch03-utf">
      <title>Decoding and Encoding UTF-8 Characters</title>

      <para>Use <literal>UTF8.decode()</literal> to decode UTF8-encoded bytes
      to a Dart string:</para>

      <screen format="linespecific"><remark>lang-dart
ch03/decodeUtf8.dart
</remark>import 'dart:convert' show UTF8;

main() {
  var string = UTF8.decode([0xc3, 0x8e, 0xc3, 0xb1, 0xc5, 0xa3, 0xc3, 0xa9,
                           0x72, 0xc3, 0xb1, 0xc3, 0xa5, 0xc5, 0xa3, 0xc3,
                           0xae, 0xc3, 0xb6, 0xc3, 0xb1, 0xc3, 0xa5, 0xc4,
                           0xbc, 0xc3, 0xae, 0xc5, 0xbe, 0xc3, 0xa5, 0xc5,
                           0xa3, 0xc3, 0xae, 0xe1, 0xbb, 0x9d, 0xc3, 0xb1]);
  print(string); // 'Îñţérñåţîöñåļîžåţîờñ'
}</screen>

      <para>To convert a stream of UTF-8 characters into a Dart string,
      specify <literal>UTF8.decoder</literal> to the Stream
      <literal>transform()</literal> method:</para>

      <screen format="linespecific"><remark>lang-dart
ch03/readFile.dart
</remark>inputStream
  .transform(UTF8.decoder)
  .transform(new LineSplitter())
  .listen(
    (String line) { 
      print('Read ${line.length} bytes from stream');
    });</screen>

      <para>Use <literal>UTF8.encode()</literal> to encode a Dart string as a
      list of UTF8-encoded bytes:</para>

      <screen format="linespecific"><remark>lang-dart
ch03/encodeUtf8.dart
</remark>import 'dart:convert' show UTF8;

main() {
  List&lt;int&gt; expected = [0xc3, 0x8e, 0xc3, 0xb1, 0xc5, 0xa3, 0xc3, 0xa9, 0x72,
                        0xc3, 0xb1, 0xc3, 0xa5, 0xc5, 0xa3, 0xc3, 0xae, 0xc3,
                        0xb6, 0xc3, 0xb1, 0xc3, 0xa5, 0xc4, 0xbc, 0xc3, 0xae,
                        0xc5, 0xbe, 0xc3, 0xa5, 0xc5, 0xa3, 0xc3, 0xae, 0xe1,
                        0xbb, 0x9d, 0xc3, 0xb1];

  List&lt;int&gt; encoded = UTF8.encode('Îñţérñåţîöñåļîžåţîờñ');

  assert(() {
    if (encoded.length != expected.length) return false;
    for (int i = 0; i &lt; encoded.length; i++) {
      if (encoded[i] != expected[i]) return false;
    }
    return true;
  });
}</screen>
    </sect2>

    <sect2 id="ch03-utf-other">
      <title>Other Functionality</title>

      <para>The dart:convert library also has converters for ASCII and ISO
      Latin 1. For details, see the <ulink
      url="http://api.dartlang.org/dart_convert.html">API docs for the
      dart:convert library.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch03-mirrors">
    <title>dart:mirrors - Reflection</title>

    <para>The dart:mirrors library provides basic reflection abilities to
    Dart. Use mirrors to query the structure of your program and to
    dynamically invoke functions or methods at runtime. </para>

    <para>The dart:mirrors library works in both web apps and command-line
    apps. To use it, import dart:mirrors.</para>

    <warning>
      <para>Using dart:mirrors can cause dart2js to generate very large
      JavaScript files.</para>

      <para>The current workaround is to add a <literal>@MirrorsUsed</literal>
      annotation before the import of dart:mirrors. For details, see the
      <ulink
      url="http://api.dartlang.org/dart_mirrors/MirrorsUsed.html">MirrorsUsed</ulink>
      API documentation. This workaround might change, as the dart:mirrors
      library is still under development.</para>
    </warning>

    <sect2 id="ch03-mirrors-symbols">
      <title>Symbols</title>

      <para>The mirror system represents the names of Dart declarations
      (classes, fields, and so on) by instances of the class <ulink
      url="http://api.dartlang.org/dart_core/Symbol.html">Symbol</ulink>.
      Symbols help compilers like dart2js produce efficient output, even when
      minified.</para>

      <para>When you know the name of the symbol ahead of time, use a symbol
      literal. This way, repeated uses of the same symbol can use the same
      canonicalized instance. If the name of the symbol is determined
      dynamically at runtime, use the Symbol constructor.</para>

      <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>import 'dart:mirrors';

// If the symbol name is known at compile time.
const className = #MyClass;

// If the symbol name is dynamically determined.
var userInput = askUserForNameOfFunction();
var functionName = new Symbol(userInput);</screen>

      <para>During minification, a compiler might replace a symbol name with a
      different (often smaller) name. To convert from a symbol back to a
      string, use <literal>MirrorSystem.getName()</literal>. This function
      returns the correct name, even if the code was minified.</para>

      <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>import 'dart:mirrors';

const className = #MyClass;
assert('MyClass' == MirrorSystem.getName(className));
</screen>
    </sect2>

    <sect2 id="ch03-mirrors-introspection">
      <title>Introspection</title>

      <para>Use mirrors to introspect the running program's structure. You can
      inspect classes, libraries, instances, and more.</para>

      <para>The examples in this section use the following Person
      class:</para>

      <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>class Person {
  String firstName;
  String lastName;
  int age;
  
  Person(this.firstName, this.lastName, this.age);

  String get fullName =&gt; '$firstName $lastName';

  void greet(String other) {
    print('Hello there, $other!');
  }
}</screen>

      <para>To begin, you need to <emphasis>reflect</emphasis> on a class or
      object to get its <emphasis>mirror</emphasis>.</para>

      <sect3 id="ch03-mirrors-class-inspect">
        <title>Class Mirrors</title>

        <para>Reflect on a Type to get its ClassMirror.</para>

        <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>ClassMirror mirror = reflectClass(Person);

assert('Person' == MirrorSystem.getName(mirror.simpleName));</screen>

        <para>You can also call <literal>runtimeType</literal> to get a Type
        from an instance.</para>

        <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>var person = new Person('Bob', 'Smith', 33);
ClassMirror mirror = reflectClass(person.runtimeType);

assert('Person' == MirrorSystem.getName(mirror.simpleName));</screen>

        <para>Once you have a ClassMirror, you can get a class's constructors,
        fields, and more. Here is an example of listing the constructors of a
        class.</para>

        <screen format="linespecific"><remark>lang-dart
ch03/mirrors.dart
</remark>showConstructors(ClassMirror mirror) {
  var methods = mirror.declarations.values.where((m) =&gt; m is MethodMirror);
  var constructors = methods.where((m) =&gt; m.isConstructor);
  
  constructors.forEach((m) {
    print('The constructor ${m.simpleName} has ${m.parameters.length} parameters.');
  });
}</screen>

        <para>Here is an example of listing all of the fields declared by a
        class.</para>

        <screen><remark>lang-dart
ch03/mirrors.dart
</remark>showFields(ClassMirror mirror) {
  var fields = mirror.declarations.values.where((m) =&gt; m is VariableMirror);

  fields.forEach((VariableMirror m) {
    var finalStatus = m.isFinal ? 'final' : 'not final';
    var privateStatus = m.isPrivate ? 'private' : 'not private';
    var typeAnnotation = m.type.simpleName;

    print('The field ${m.simpleName} is $privateStatus and $finalStatus and is annotated '
          'as $typeAnnotation');
  });
}</screen>

        <para>For a full list of methods, consult the <ulink
        url="http://api.dartlang.org/dart_mirrors/ClassMirror.html">API docs
        for ClassMirror</ulink>.</para>
      </sect3>

      <sect3 id="ch03-mirrors-instance-inspect">
        <title>Instance Mirrors</title>

        <para>Reflect on an object to get an InstanceMirror.</para>

        <screen><remark>lang-dart
ch03/mirrors.dart
</remark>var p = new Person('Bob', 'Smith', 42);
InstanceMirror mirror = reflect(p);</screen>

        <para>If you have an InstanceMirror and you want to get the object
        that it reflects, use <literal>reflectee</literal>.</para>

        <screen><remark>lang-dart
ch03/mirrors.dart
</remark>var person = mirror.reflectee;
assert(identical(p, person));</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-mirrors-invocation">
      <title>Invocation</title>

      <para>Once you have an InstanceMirror, you can invoke methods and call
      getters and setters. For a full list of methods, consult the <ulink
      url="http://api.dartlang.org/dart_mirrors/InstanceMirror.html">API docs
      for InstanceMirror</ulink>.</para>

      <sect3 id="ch03-mirrors-invoke">
        <title>Invoke Methods</title>

        <para>Use InstanceMirror's <literal>invoke()</literal> method to
        invoke a method on an object. The first parameter specifies the method
        to be invoked, and the second is a list of positional arguments to the
        method. An optional third parameter lets you specify named
        arguments.</para>

        <screen><remark>lang-dart
ch03/mirrors.dart
</remark>var p = new Person('Bob', 'Smith', 42);
InstanceMirror mirror = reflect(p);

mirror.invoke(#greet, ['Shailen']);</screen>
      </sect3>

      <sect3 id="ch03-mirrors-getset-fields">
        <title>Get and Set Properties</title>

        <para>Use InstanceMirror's <literal>getField()</literal> and
        <literal>setField()</literal> methods to get and set properties of an
        object.</para>

        <screen><remark>lang-dart
ch03/mirrors.dart
</remark>
var p = new Person('Bob', 'Smith', 42);
InstanceMirror mirror = reflect(p);

// Get the value of a property.
var fullName = mirror.getField(#fullName).reflectee;
assert(fullName == 'Bob Smith');
  
// Set the value of a property.
mirror.setField(#firstName, 'Mary');
assert(p.firstName == 'Mary');</screen>
      </sect3>
    </sect2>

    <sect2 id="ch03-more-information-mirrors">
      <title>More Information</title>

      <para>The article <ulink
      url="https://www.dartlang.org/articles/reflection-with-mirrors/">Reflection
      in Dart with Mirrors</ulink> has more information and examples. Also see
      the API docs for <ulink
      url="http://api.dartlang.org/dart_mirrors.html">dart:mirror,</ulink>
      especially <ulink
      url="http://api.dartlang.org/dart_mirrors/MirrorsUsed.html">MirrorsUsed</ulink>,
      <ulink
      url="http://api.dartlang.org/dart_mirrors/ClassMirror.html">ClassMirror,</ulink>
      and <ulink
      url="http://api.dartlang.org/dart_mirrors/InstanceMirror.html">InstanceMirror.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch03-summary">
    <title>Summary</title>

    <para>This chapter introduced you to the most commonly used functionality
    in many of Dart’s built-in libraries. It didn’t cover all the built-in
    libraries, however. Others that you might want to look into include <ulink
    url="http://api.dartlang.org/dart_collection.html">dart:collection,</ulink>
    <ulink
    url="http://api.dartlang.org/dart_isolate.html">dart:isolate,</ulink>
    <ulink url="http://api.dartlang.org/dart_js.html">dart:js,</ulink> and
    <ulink
    url="http://api.dartlang.org/dart_typed_data.html">dart:typed_data.</ulink>
    You can get yet more libraries by using the pub tool, discussed in the
    next chapter. The <ulink
    url="http://pub.dartlang.org/packages/args">args,</ulink> <ulink
    url="http://api.dartlang.org/logging.html">logging,</ulink> <ulink
    url="http://pub.dartlang.org/packages/polymer">polymer,</ulink> and <ulink
    url="http://api.dartlang.org/unittest.html" wordsize=""><phrase
    role="keep-together">unittest</phrase></ulink> libraries are just a
    sampling of what you can install using pub.</para>
  </sect1>
</chapter>
